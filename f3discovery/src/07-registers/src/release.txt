
registers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x80014f4 <__pre_init>  @ imm = #0x1358
;     while sbss < ebss {
 800019c:      	movw	r0, #0x4
 80001a0:      	movw	r1, #0x0
 80001a4:      	movt	r0, #0x2000
 80001a8:      	movt	r1, #0x2000
 80001ac:      	cmp	r1, r0
 80001ae:      	bhs	0x80001da <Reset+0x46>  @ imm = #0x28
 80001b0:      	movw	r1, #0x0
 80001b4:      	movs	r2, #0x0
 80001b6:      	movt	r1, #0x2000
 80001ba:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001be:      	cmp	r1, r0
 80001c0:      	bhs	0x80001da <Reset+0x46>  @ imm = #0x16
 80001c2:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001c6:      	cmp	r1, r0
 80001c8:      	itt	lo
 80001ca:      	strlo	r2, [r1], #4
;     while sbss < ebss {
 80001ce:      	cmplo	r1, r0
 80001d0:      	bhs	0x80001da <Reset+0x46>  @ imm = #0x6
 80001d2:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001d6:      	cmp	r1, r0
 80001d8:      	blo	0x80001ba <Reset+0x26>  @ imm = #-0x22
;     while sdata < edata {
 80001da:      	movw	r1, #0x0
 80001de:      	movw	r0, #0x0
 80001e2:      	movt	r1, #0x2000
 80001e6:      	movt	r0, #0x2000
 80001ea:      	cmp	r0, r1
 80001ec:      	bhs	0x800020c <Reset+0x78>  @ imm = #0x1c
 80001ee:      	adds	r2, r0, #0x4
 80001f0:      	cmp	r1, r2
 80001f2:      	it	hi
 80001f4:      	movhi	r2, r1
 80001f6:      	mvns	r1, r0
 80001f8:      	add	r1, r2
 80001fa:      	adds	r1, #0x4
 80001fc:      	bic	r2, r1, #0x3
 8000200:      	movw	r1, #0x1abc
 8000204:      	movt	r1, #0x800
 8000208:      	bl	0x8001710 <__aeabi_memcpy4> @ imm = #0x1504
 800020c:      	movw	r0, #0xed88
 8000210:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 8000214:      	ldr	r1, [r0]
 8000216:      	orr	r1, r1, #0xf00000
 800021a:      	str	r1, [r0]
;             trampoline()
 800021c:      	bl	0x80014e8 <ResetTrampoline> @ imm = #0x12c8
 8000220:      	trap

08000222 <main>:
; #[entry]
 8000222:      	push	{r7, lr}
 8000224:      	mov	r7, sp
 8000226:      	bl	0x800022c <registers::__cortex_m_rt_main::h85f76f66f2aac973> @ imm = #0x2
 800022a:      	trap

0800022c <registers::__cortex_m_rt_main::h85f76f66f2aac973>:
; fn main() -> ! {
 800022c:      	push	{r7, lr}
 800022e:      	mov	r7, sp
;     aux7::init();
 8000230:      	bl	0x8000256 <aux7::init::hd1d781535fb38b8e> @ imm = #0x22
 8000234:      	movw	r0, #0x1018
 8000238:      	mov.w	r1, #0x200
 800023c:      	movt	r0, #0x4800
 8000240:      	str	r1, [r0]
 8000242:      	mov.w	r1, #0x800
 8000246:      	str	r1, [r0]
 8000248:      	mov.w	r1, #0x2000000
 800024c:      	str	r1, [r0]
 800024e:      	mov.w	r1, #0x8000000
 8000252:      	str	r1, [r0]
;     loop {}
 8000254:      	b	0x8000254 <registers::__cortex_m_rt_main::h85f76f66f2aac973+0x28> @ imm = #-0x4

08000256 <aux7::init::hd1d781535fb38b8e>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 8000256:      	push	{r4, r5, r6, r7, lr}
 8000258:      	add	r7, sp, #0xc
 800025a:      	push.w	{r8, r9, r11}
;                     $func($($args),*)
 800025e:      	bl	0x800170a <__primask_r> @ imm = #0x14a8
 8000262:      	mov	r4, r0
 8000264:      	bl	0x8001702 <__cpsid>     @ imm = #0x149a
;             if unsafe { DEVICE_PERIPHERALS } {
 8000268:      	movw	r8, #0x0
;     if r & (1 << 0) == (1 << 0) {
 800026c:      	and	r0, r4, #0x1
;             if unsafe { DEVICE_PERIPHERALS } {
 8000270:      	movt	r8, #0x2000
 8000274:      	ldrb.w	r5, [r8, #0x1]
 8000278:      	cmp	r5, #0x0
 800027a:      	itt	eq
 800027c:      	moveq	r1, #0x1
;         DEVICE_PERIPHERALS = true;
 800027e:      	strbeq.w	r1, [r8, #0x1]
;     if primask.is_active() {
 8000282:      	cmp	r0, #0x0
;                     $func($($args),*)
 8000284:      	it	eq
 8000286:      	bleq	0x8001706 <__cpsie>     @ imm = #0x147c
 800028a:      	cmp	r5, #0x0
 800028c:      	bne.w	0x80003c8 <aux7::init::hd1d781535fb38b8e+0x172> @ imm = #0x138
 8000290:      	movw	r0, #0x1028
 8000294:      	movs	r6, #0x1
 8000296:      	movt	r0, #0x4002
 800029a:      	ldr	r1, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800029e:      	orr	r1, r1, #0x200000
 80002a2:      	str	r1, [r0, #-20]
 80002a6:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80002a8:      	orr	r1, r1, #0x200000
 80002ac:      	str	r1, [r0]
 80002ae:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80002b0:      	bic	r1, r1, #0x200000
 80002b4:      	str	r1, [r0]
 80002b6:      	movw	r0, #0x1000
 80002ba:      	movt	r0, #0x4800
 80002be:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 80002c0:      	bfi	r1, r6, #18, #2
 80002c4:      	str	r1, [r0]
 80002c6:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 80002c8:      	bic	r1, r1, #0x200
 80002cc:      	str	r1, [r0, #0x4]
 80002ce:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80002d0:      	bfi	r1, r6, #16, #2
 80002d4:      	str	r1, [r0]
 80002d6:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80002d8:      	bic	r1, r1, #0x100
 80002dc:      	str	r1, [r0, #0x4]
 80002de:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 80002e0:      	bfi	r1, r6, #20, #2
 80002e4:      	str	r1, [r0]
 80002e6:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 80002e8:      	bic	r1, r1, #0x400
 80002ec:      	str	r1, [r0, #0x4]
 80002ee:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 80002f0:      	bfi	r1, r6, #30, #2
 80002f4:      	str	r1, [r0]
 80002f6:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80002f8:      	bic	r1, r1, #0x8000
 80002fc:      	str	r1, [r0, #0x4]
 80002fe:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000300:      	bfi	r1, r6, #22, #2
 8000304:      	str	r1, [r0]
 8000306:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000308:      	bic	r1, r1, #0x800
 800030c:      	str	r1, [r0, #0x4]
 800030e:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8000310:      	bfi	r1, r6, #28, #2
 8000314:      	str	r1, [r0]
 8000316:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000318:      	bic	r1, r1, #0x4000
 800031c:      	str	r1, [r0, #0x4]
 800031e:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000320:      	bfi	r1, r6, #24, #2
 8000324:      	str	r1, [r0]
 8000326:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000328:      	bic	r1, r1, #0x1000
 800032c:      	str	r1, [r0, #0x4]
 800032e:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000330:      	bfi	r1, r6, #26, #2
 8000334:      	str	r1, [r0]
 8000336:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000338:      	bic	r1, r1, #0x2000
 800033c:      	str	r1, [r0, #0x4]
 800033e:      	mov.w	r1, #0x2000000
 8000342:      	str	r1, [r0, #0x18]
 8000344:      	mov.w	r1, #0x1000000
 8000348:      	str	r1, [r0, #0x18]
 800034a:      	mov.w	r1, #0x4000000
 800034e:      	str	r1, [r0, #0x18]
 8000350:      	mov.w	r1, #0x80000000
 8000354:      	str	r1, [r0, #0x18]
 8000356:      	mov.w	r1, #0x8000000
 800035a:      	str	r1, [r0, #0x18]
 800035c:      	mov.w	r1, #0x40000000
 8000360:      	str	r1, [r0, #0x18]
 8000362:      	mov.w	r1, #0x10000000
 8000366:      	str	r1, [r0, #0x18]
 8000368:      	mov.w	r1, #0x20000000
 800036c:      	str	r1, [r0, #0x18]
;                     $func($($args),*)
 800036e:      	bl	0x800170a <__primask_r> @ imm = #0x1398
 8000372:      	mov	r9, r0
 8000374:      	bl	0x8001702 <__cpsid>     @ imm = #0x138a
 8000378:      	bl	0x800170a <__primask_r> @ imm = #0x138e
 800037c:      	mov	r5, r0
 800037e:      	bl	0x8001702 <__cpsid>     @ imm = #0x1380
;             if unsafe { TAKEN } {
 8000382:      	ldrb.w	r4, [r8]
;     if r & (1 << 0) == (1 << 0) {
 8000386:      	and	r0, r5, #0x1
;             if unsafe { TAKEN } {
 800038a:      	cmp	r4, #0x0
;         TAKEN = true;
 800038c:      	it	eq
 800038e:      	strbeq.w	r6, [r8]
;     if primask.is_active() {
 8000392:      	cmp	r0, #0x0
;                     $func($($args),*)
 8000394:      	it	eq
 8000396:      	bleq	0x8001706 <__cpsie>     @ imm = #0x136c
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800039a:      	cmp	r4, #0x0
 800039c:      	and	r0, r9, #0x1
 80003a0:      	itt	eq
 80003a2:      	moveq	r1, #0x1
;         TAKEN = true;
 80003a4:      	strbeq.w	r1, [r8]
;     if primask.is_active() {
 80003a8:      	cmp	r0, #0x0
;                     $func($($args),*)
 80003aa:      	it	eq
 80003ac:      	bleq	0x8001706 <__cpsie>     @ imm = #0x1356
 80003b0:      	cmp	r4, #0x0
; }
 80003b2:      	itt	eq
 80003b4:      	popeq.w	{r8, r9, r11}
 80003b8:      	popeq	{r4, r5, r6, r7, pc}
 80003ba:      	movw	r0, #0x195c
 80003be:      	movt	r0, #0x800
 80003c2:      	bl	0x80011c0 <core::panicking::panic::h493a9d527244de3a> @ imm = #0xdfa
 80003c6:      	trap
 80003c8:      	movw	r0, #0x196c
 80003cc:      	movt	r0, #0x800
 80003d0:      	bl	0x80011c0 <core::panicking::panic::h493a9d527244de3a> @ imm = #0xdec
 80003d4:      	trap

080003d6 <core::ops::function::FnOnce::call_once::h8b2a3471a30743e5>:
 80003d6:      	ldr	r0, [r0]
 80003d8:      	b	0x80003d8 <core::ops::function::FnOnce::call_once::h8b2a3471a30743e5+0x2> @ imm = #-0x4

080003da <core::panicking::panic_fmt::h5ed22fe37569ff8d>:
 80003da:      	push	{r7, lr}
 80003dc:      	mov	r7, sp
 80003de:      	sub	sp, #0x18
 80003e0:      	strd	r0, r1, [sp, #12]
 80003e4:      	movw	r0, #0x19b8
 80003e8:      	movt	r0, #0x800
 80003ec:      	movs	r2, #0x1
 80003ee:      	str	r0, [sp, #0x8]
 80003f0:      	movw	r0, #0x1a90
 80003f4:      	movt	r0, #0x800
 80003f8:      	strb.w	r2, [sp, #0x14]
 80003fc:      	str	r0, [sp, #0x4]
 80003fe:      	add	r0, sp, #0x4
 8000400:      	bl	0x80014f6 <rust_begin_unwind> @ imm = #0x10f2
 8000404:      	trap

08000406 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::h077521445d3ab7ce>:
 8000406:      	bx	lr

08000408 <<T as core::any::Any>::type_id::h2faef10b35e80c78>:
 8000408:      	movw	r0, #0x1be8
 800040c:      	movw	r1, #0x4fd5
 8000410:      	movt	r0, #0xdef8
 8000414:      	movt	r1, #0x57d5
 8000418:      	bx	lr

0800041a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4>:
 800041a:      	push	{r4, r5, r6, r7, lr}
 800041c:      	add	r7, sp, #0xc
 800041e:      	push.w	{r8, r9, r10, r11}
 8000422:      	sub	sp, #0x3c
 8000424:      	ldr	r5, [r0]
 8000426:      	movw	r0, #0x2710
 800042a:      	mov	r11, r1
 800042c:      	cmp	r5, r0
 800042e:      	movw	r0, #0x19c8
 8000432:      	movt	r0, #0x800
 8000436:      	blo	0x80004be <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0xa4> @ imm = #0x84
 8000438:      	movw	lr, #0x1759
 800043c:      	movw	r6, #0xe0ff
 8000440:      	sub.w	r10, r7, #0x43
 8000444:      	movs	r2, #0x0
 8000446:      	movw	r12, #0xff9c
 800044a:      	movt	lr, #0xd1b7
 800044e:      	movw	r8, #0xd8f0
 8000452:      	movw	r9, #0x147b
 8000456:      	movt	r6, #0x5f5
 800045a:      	str.w	r11, [sp, #0x10]
 800045e:      	umull	r1, r4, r5, lr
 8000462:      	add.w	r11, r10, r2
 8000466:      	subs	r2, #0x4
 8000468:      	cmp	r5, r6
 800046a:      	lsr.w	r1, r4, #0xd
 800046e:      	mla	r4, r1, r8, r5
 8000472:      	mov	r5, r1
 8000474:      	uxth	r3, r4
 8000476:      	lsr.w	r3, r3, #0x2
 800047a:      	mul	r3, r3, r9
 800047e:      	lsr.w	r3, r3, #0x11
 8000482:      	mla	r4, r3, r12, r4
 8000486:      	ldrh.w	r3, [r0, r3, lsl #1]
 800048a:      	strh.w	r3, [r11, #0x23]
 800048e:      	uxth	r4, r4
 8000490:      	ldrh.w	r4, [r0, r4, lsl #1]
 8000494:      	strh.w	r4, [r11, #0x25]
 8000498:      	bhi	0x800045e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x44> @ imm = #-0x3e
 800049a:      	ldr.w	r11, [sp, #0x10]
 800049e:      	adds	r2, #0x27
 80004a0:      	mov	r5, r1
 80004a2:      	cmp	r5, #0x63
 80004a4:      	bhi	0x80004c4 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0xaa> @ imm = #0x1c
 80004a6:      	mov	r1, r5
 80004a8:      	cmp	r1, #0xa
 80004aa:      	blo	0x80004ea <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0xd0> @ imm = #0x3c
 80004ac:      	ldrh.w	r0, [r0, r1, lsl #1]
 80004b0:      	sub.w	r9, r2, #0x2
 80004b4:      	sub.w	r1, r7, #0x43
 80004b8:      	strh.w	r0, [r1, r9]
 80004bc:      	b	0x80004fa <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0xe0> @ imm = #0x3a
 80004be:      	movs	r2, #0x27
 80004c0:      	cmp	r5, #0x63
 80004c2:      	bls	0x80004a6 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x8c> @ imm = #-0x20
 80004c4:      	uxth	r1, r5
 80004c6:      	movw	r3, #0x147b
 80004ca:      	lsrs	r1, r1, #0x2
 80004cc:      	subs	r2, #0x2
 80004ce:      	muls	r1, r3, r1
 80004d0:      	mvn	r3, #0x63
 80004d4:      	sub.w	r6, r7, #0x43
 80004d8:      	lsrs	r1, r1, #0x11
 80004da:      	smlabb	r3, r1, r3, r5
 80004de:      	uxth	r3, r3
 80004e0:      	ldrh.w	r3, [r0, r3, lsl #1]
 80004e4:      	strh	r3, [r6, r2]
 80004e6:      	cmp	r1, #0xa
 80004e8:      	bhs	0x80004ac <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x92> @ imm = #-0x40
 80004ea:      	sub.w	r9, r2, #0x1
 80004ee:      	add.w	r0, r1, #0x30
 80004f2:      	sub.w	r1, r7, #0x43
 80004f6:      	strb.w	r0, [r1, r9]
 80004fa:      	ldr.w	r0, [r11, #0x18]
 80004fe:      	movw	r3, #0x1a90
 8000502:      	sub.w	r1, r7, #0x43
 8000506:      	ldr.w	r2, [r11, #0x8]
 800050a:      	add.w	r6, r1, r9
 800050e:      	movt	r3, #0x800
 8000512:      	lsls	r1, r0, #0x1d
 8000514:      	ands	r10, r0, #0x1
 8000518:      	mov.w	r8, #0x2b
 800051c:      	and.w	r4, r3, r1, asr #31
 8000520:      	rsb.w	r3, r9, #0x27
 8000524:      	it	eq
 8000526:      	moveq.w	r8, #0x110000
 800052a:      	cbz	r2, 0x800055e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x144> @ imm = #0x30
 800052c:      	ldr.w	r5, [r11, #0xc]
 8000530:      	add.w	r1, r3, r10
 8000534:      	cmp	r5, r1
 8000536:      	bls	0x8000576 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x15c> @ imm = #0x3c
 8000538:      	lsls	r0, r0, #0x1c
 800053a:      	strd	r3, r6, [sp, #12]
 800053e:      	bmi	0x80005a2 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x188> @ imm = #0x60
 8000540:      	ldrb.w	r0, [r11, #0x20]
 8000544:      	subs	r1, r5, r1
 8000546:      	mov	r10, r4
 8000548:      	cmp	r0, #0x3
 800054a:      	it	eq
 800054c:      	moveq	r0, #0x1
 800054e:      	lsls	r2, r0, #0x1e
 8000550:      	beq	0x80005fe <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1e4> @ imm = #0xaa
 8000552:      	cmp	r0, #0x1
 8000554:      	bne	0x80005f8 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1de> @ imm = #0xa0
 8000556:      	movs	r0, #0x0
 8000558:      	str	r0, [sp, #0x8]
 800055a:      	mov	r0, r1
 800055c:      	b	0x8000600 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1e6> @ imm = #0xa0
 800055e:      	mov	r9, r3
 8000560:      	mov	r3, r4
 8000562:      	ldrd	r4, r5, [r11]
 8000566:      	mov	r2, r8
 8000568:      	mov	r1, r5
 800056a:      	mov	r0, r4
 800056c:      	bl	0x80006a0 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab> @ imm = #0x130
 8000570:      	cbz	r0, 0x800058c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x172> @ imm = #0x18
 8000572:      	movs	r4, #0x1
 8000574:      	b	0x80005ce <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1b4> @ imm = #0x56
 8000576:      	mov	r9, r3
 8000578:      	mov	r3, r4
 800057a:      	ldrd	r4, r5, [r11]
 800057e:      	mov	r2, r8
 8000580:      	mov	r1, r5
 8000582:      	mov	r0, r4
 8000584:      	bl	0x80006a0 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab> @ imm = #0x118
 8000588:      	cmp	r0, #0x0
 800058a:      	bne	0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0xda
 800058c:      	ldr	r3, [r5, #0xc]
 800058e:      	mov	r0, r4
 8000590:      	mov	r1, r6
 8000592:      	mov	r2, r9
 8000594:      	blx	r3
 8000596:      	mov	r4, r0
 8000598:      	mov	r0, r4
 800059a:      	add	sp, #0x3c
 800059c:      	pop.w	{r8, r9, r10, r11}
 80005a0:      	pop	{r4, r5, r6, r7, pc}
 80005a2:      	ldrd	r2, r6, [r11]
 80005a6:      	mov	r3, r4
 80005a8:      	ldr.w	r0, [r11, #0x1c]
 80005ac:      	movs	r4, #0x1
 80005ae:      	ldrb.w	r1, [r11, #0x20]
 80005b2:      	str	r0, [sp, #0x4]
 80005b4:      	movs	r0, #0x30
 80005b6:      	str	r1, [sp]
 80005b8:      	mov	r1, r6
 80005ba:      	str.w	r0, [r11, #0x1c]
 80005be:      	mov	r0, r2
 80005c0:      	str	r2, [sp, #0x8]
 80005c2:      	mov	r2, r8
 80005c4:      	strb.w	r4, [r11, #0x20]
 80005c8:      	bl	0x80006a0 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab> @ imm = #0xd4
 80005cc:      	cbz	r0, 0x80005d8 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1be> @ imm = #0x8
 80005ce:      	mov	r0, r4
 80005d0:      	add	sp, #0x3c
 80005d2:      	pop.w	{r8, r9, r10, r11}
 80005d6:      	pop	{r4, r5, r6, r7, pc}
 80005d8:      	add.w	r0, r9, r5
 80005dc:      	ldr	r5, [sp, #0x8]
 80005de:      	sub.w	r0, r0, r10
 80005e2:      	sub.w	r4, r0, #0x26
 80005e6:      	subs	r4, #0x1
 80005e8:      	beq	0x800065c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x242> @ imm = #0x70
 80005ea:      	ldr	r2, [r6, #0x10]
 80005ec:      	mov	r0, r5
 80005ee:      	movs	r1, #0x30
 80005f0:      	blx	r2
 80005f2:      	cmp	r0, #0x0
 80005f4:      	beq	0x80005e6 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1cc> @ imm = #-0x12
 80005f6:      	b	0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0x6e
 80005f8:      	lsrs	r0, r1, #0x1
 80005fa:      	adds	r1, #0x1
 80005fc:      	lsrs	r1, r1, #0x1
 80005fe:      	str	r1, [sp, #0x8]
 8000600:      	ldrd	r9, r4, [r11]
 8000604:      	adds	r6, r0, #0x1
 8000606:      	ldr.w	r5, [r11, #0x1c]
 800060a:      	subs	r6, #0x1
 800060c:      	beq	0x800061c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x202> @ imm = #0xc
 800060e:      	ldr	r2, [r4, #0x10]
 8000610:      	mov	r0, r9
 8000612:      	mov	r1, r5
 8000614:      	blx	r2
 8000616:      	cmp	r0, #0x0
 8000618:      	beq	0x800060a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x1f0> @ imm = #-0x12
 800061a:      	b	0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0x4a
 800061c:      	cmp.w	r5, #0x110000
 8000620:      	beq	0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0x44
 8000622:      	mov	r0, r9
 8000624:      	mov	r1, r4
 8000626:      	mov	r2, r8
 8000628:      	mov	r3, r10
 800062a:      	bl	0x80006a0 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab> @ imm = #0x72
 800062e:      	cbnz	r0, 0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0x36
 8000630:      	ldr	r3, [r4, #0xc]
 8000632:      	mov	r0, r9
 8000634:      	ldrd	r2, r1, [sp, #12]
 8000638:      	blx	r3
 800063a:      	cbnz	r0, 0x8000668 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x24e> @ imm = #0x2a
 800063c:      	ldr	r6, [sp, #0x8]
 800063e:      	mov.w	r8, #0x0
 8000642:      	cmp	r6, r8
 8000644:      	beq	0x800068c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x272> @ imm = #0x44
 8000646:      	ldr	r2, [r4, #0x10]
 8000648:      	mov	r0, r9
 800064a:      	mov	r1, r5
 800064c:      	blx	r2
 800064e:      	add.w	r8, r8, #0x1
 8000652:      	cmp	r0, #0x0
 8000654:      	beq	0x8000642 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x228> @ imm = #-0x16
 8000656:      	sub.w	r0, r8, #0x1
 800065a:      	b	0x800068e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x274> @ imm = #0x30
 800065c:      	ldr	r3, [r6, #0xc]
 800065e:      	mov	r0, r5
 8000660:      	ldrd	r2, r1, [sp, #12]
 8000664:      	blx	r3
 8000666:      	cbz	r0, 0x8000674 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hdd0399f04cd7b9d4+0x25a> @ imm = #0xa
 8000668:      	movs	r4, #0x1
 800066a:      	mov	r0, r4
 800066c:      	add	sp, #0x3c
 800066e:      	pop.w	{r8, r9, r10, r11}
 8000672:      	pop	{r4, r5, r6, r7, pc}
 8000674:      	ldr	r0, [sp]
 8000676:      	movs	r4, #0x0
 8000678:      	strb.w	r0, [r11, #0x20]
 800067c:      	ldr	r0, [sp, #0x4]
 800067e:      	str.w	r0, [r11, #0x1c]
 8000682:      	mov	r0, r4
 8000684:      	add	sp, #0x3c
 8000686:      	pop.w	{r8, r9, r10, r11}
 800068a:      	pop	{r4, r5, r6, r7, pc}
 800068c:      	mov	r0, r6
 800068e:      	movs	r4, #0x0
 8000690:      	cmp	r0, r6
 8000692:      	it	lo
 8000694:      	movlo	r4, #0x1
 8000696:      	mov	r0, r4
 8000698:      	add	sp, #0x3c
 800069a:      	pop.w	{r8, r9, r10, r11}
 800069e:      	pop	{r4, r5, r6, r7, pc}

080006a0 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab>:
 80006a0:      	push	{r4, r5, r6, r7, lr}
 80006a2:      	add	r7, sp, #0xc
 80006a4:      	str	r11, [sp, #-4]!
 80006a8:      	mov	r4, r3
 80006aa:      	mov	r6, r1
 80006ac:      	mov	r5, r0
 80006ae:      	cmp.w	r2, #0x110000
 80006b2:      	beq	0x80006c6 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab+0x26> @ imm = #0x10
 80006b4:      	ldr	r3, [r6, #0x10]
 80006b6:      	mov	r0, r5
 80006b8:      	mov	r1, r2
 80006ba:      	blx	r3
 80006bc:      	cbz	r0, 0x80006c6 <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab+0x26> @ imm = #0x6
 80006be:      	movs	r0, #0x1
 80006c0:      	ldr	r11, [sp], #4
 80006c4:      	pop	{r4, r5, r6, r7, pc}
 80006c6:      	cbz	r4, 0x80006da <core::fmt::Formatter::pad_integral::write_prefix::h8fab1c3af6808bab+0x3a> @ imm = #0x10
 80006c8:      	ldr	r3, [r6, #0xc]
 80006ca:      	mov	r0, r5
 80006cc:      	mov	r1, r4
 80006ce:      	movs	r2, #0x0
 80006d0:      	ldr	r11, [sp], #4
 80006d4:      	pop.w	{r4, r5, r6, r7, lr}
 80006d8:      	bx	r3
 80006da:      	movs	r0, #0x0
 80006dc:      	ldr	r11, [sp], #4
 80006e0:      	pop	{r4, r5, r6, r7, pc}

080006e2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9>:
 80006e2:      	push	{r4, r5, r6, r7, lr}
 80006e4:      	add	r7, sp, #0xc
 80006e6:      	push.w	{r8, r9, r10, r11}
 80006ea:      	sub	sp, #0x24
 80006ec:      	mov	r8, r1
 80006ee:      	ldr.w	r12, [r0, #0x8]
 80006f2:      	ldr	r1, [r0, #0x10]
 80006f4:      	mov	r4, r0
 80006f6:      	cmp.w	r12, #0x1
 80006fa:      	it	ne
 80006fc:      	cmpne	r1, #0x1
 80006fe:      	bne	0x8000714 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x32> @ imm = #0x12
 8000700:      	cmp	r1, #0x1
 8000702:      	bne	0x80007ee <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x10c> @ imm = #0xe8
 8000704:      	ldr	r1, [r4, #0x14]
 8000706:      	mov	r10, r4
 8000708:      	add.w	lr, r8, r2
 800070c:      	movs	r0, #0x0
 800070e:      	adds	r4, r1, #0x1
 8000710:      	mov	r3, r8
 8000712:      	b	0x800072c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x4a> @ imm = #0x16
 8000714:      	ldr	r1, [r4]
 8000716:      	b.w	0x8001140 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa5e> @ imm = #0xa26
 800071a:      	orr.w	r5, r6, r9, lsl #6
 800071e:      	adds	r3, r1, #0x2
 8000720:      	subs	r1, r0, r1
 8000722:      	cmp.w	r5, #0x110000
 8000726:      	add.w	r0, r1, r3
 800072a:      	beq	0x80007b2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd0> @ imm = #0x84
 800072c:      	subs	r4, #0x1
 800072e:      	mov	r1, r3
 8000730:      	beq	0x8000784 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa2> @ imm = #0x50
 8000732:      	cmp	r1, lr
 8000734:      	beq	0x80007b2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd0> @ imm = #0x7a
 8000736:      	mov	r3, r1
 8000738:      	ldrsb	r6, [r3], #1
 800073c:      	cmp.w	r6, #0xffffffff
 8000740:      	uxtb	r5, r6
 8000742:      	bgt	0x8000720 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x3e> @ imm = #-0x26
 8000744:      	ldrb	r6, [r1, #0x1]
 8000746:      	and	r9, r5, #0x1f
 800074a:      	cmp	r5, #0xdf
 800074c:      	and	r6, r6, #0x3f
 8000750:      	bls	0x800071a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x38> @ imm = #-0x3a
 8000752:      	ldrb	r3, [r1, #0x2]
 8000754:      	cmp	r5, #0xf0
 8000756:      	and	r3, r3, #0x3f
 800075a:      	orr.w	r6, r3, r6, lsl #6
 800075e:      	blo	0x800077c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x9a> @ imm = #0x1a
 8000760:      	ldrb	r3, [r1, #0x3]
 8000762:      	and	r5, r9, #0x7
 8000766:      	and	r3, r3, #0x3f
 800076a:      	orr.w	r3, r3, r6, lsl #6
 800076e:      	orr.w	r5, r3, r5, lsl #18
 8000772:      	cmp.w	r5, #0x110000
 8000776:      	beq	0x80007b2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd0> @ imm = #0x38
 8000778:      	adds	r3, r1, #0x4
 800077a:      	b	0x8000720 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x3e> @ imm = #-0x5e
 800077c:      	orr.w	r5, r6, r9, lsl #12
 8000780:      	adds	r3, r1, #0x3
 8000782:      	b	0x8000720 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x3e> @ imm = #-0x66
 8000784:      	cmp	r1, lr
 8000786:      	beq	0x80007b2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd0> @ imm = #0x28
 8000788:      	ldrsb.w	r3, [r1]
 800078c:      	mov	r4, r10
 800078e:      	cmp.w	r3, #0xffffffff
 8000792:      	bgt	0x800079e <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xbc> @ imm = #0x8
 8000794:      	uxtb	r3, r3
 8000796:      	cmp	r3, #0xe0
 8000798:      	it	hs
 800079a:      	cmphs	r3, #0xf0
 800079c:      	bhs	0x80007c6 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xe4> @ imm = #0x26
 800079e:      	cbz	r0, 0x80007ba <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd8> @ imm = #0x18
 80007a0:      	cmp	r0, r2
 80007a2:      	bhs	0x80007b8 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd6> @ imm = #0x12
 80007a4:      	ldrsb.w	r1, [r8, r0]
 80007a8:      	cmn.w	r1, #0x40
 80007ac:      	bge	0x80007ba <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xd8> @ imm = #0xa
 80007ae:      	movs	r1, #0x0
 80007b0:      	b	0x80007bc <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xda> @ imm = #0x8
 80007b2:      	mov	r0, r2
 80007b4:      	mov	r4, r10
 80007b6:      	b	0x80007f0 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x10e> @ imm = #0x36
 80007b8:      	bne	0x80007ae <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xcc> @ imm = #-0xe
 80007ba:      	mov	r1, r8
 80007bc:      	cmp	r1, #0x0
 80007be:      	ite	eq
 80007c0:      	moveq	r0, r2
 80007c2:      	movne	r8, r1
 80007c4:      	b	0x80007f0 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x10e> @ imm = #0x28
 80007c6:      	ldrb	r6, [r1, #0x1]
 80007c8:      	and	r3, r3, #0x7
 80007cc:      	ldrb	r5, [r1, #0x2]
 80007ce:      	ldrb	r1, [r1, #0x3]
 80007d0:      	and	r6, r6, #0x3f
 80007d4:      	and	r5, r5, #0x3f
 80007d8:      	and	r1, r1, #0x3f
 80007dc:      	lsls	r5, r5, #0x6
 80007de:      	orr.w	r6, r5, r6, lsl #12
 80007e2:      	add	r1, r6
 80007e4:      	orr.w	r1, r1, r3, lsl #18
 80007e8:      	cmp.w	r1, #0x110000
 80007ec:      	bne	0x800079e <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xbc> @ imm = #-0x52
 80007ee:      	mov	r0, r2
 80007f0:      	cmp.w	r12, #0x0
 80007f4:      	beq.w	0x800113c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa5a> @ imm = #0x944
 80007f8:      	ldr	r5, [r4, #0xc]
 80007fa:      	cmp	r0, #0x10
 80007fc:      	bhs	0x800081a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x138> @ imm = #0x1a
 80007fe:      	cmp	r0, #0x0
 8000800:      	beq.w	0x8000976 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x294> @ imm = #0x172
 8000804:      	and	r3, r0, #0x3
 8000808:      	mov	r6, r0
 800080a:      	subs	r0, #0x1
 800080c:      	cmp	r0, #0x3
 800080e:      	bhs.w	0x800097a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x298> @ imm = #0x168
 8000812:      	movs	r2, #0x0
 8000814:      	mov	r1, r8
 8000816:      	mov	r0, r6
 8000818:      	b	0x8000b20 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x43e> @ imm = #0x304
 800081a:      	add.w	r1, r8, #0x3
 800081e:      	str.w	r8, [sp, #0x20]
 8000822:      	bic	r1, r1, #0x3
 8000826:      	sub.w	r6, r1, r8
 800082a:      	cmp	r0, r6
 800082c:      	bhs.w	0x8000954 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x272> @ imm = #0x124
 8000830:      	subs	r2, r0, #0x4
 8000832:      	movs	r1, #0x1
 8000834:      	mov	r12, r5
 8000836:      	mov	r10, r4
 8000838:      	add.w	r3, r1, r2, lsr #2
 800083c:      	bic	r2, r2, #0x3
 8000840:      	bic	r1, r3, #0x3
 8000844:      	and	lr, r3, #0x3
 8000848:      	str	r2, [sp, #0x1c]
 800084a:      	movs	r2, #0x0
 800084c:      	mov	r6, r8
 800084e:      	ldrsb.w	r5, [r6, #0xc]
 8000852:      	ldrsb.w	r9, [r6, #0xd]
 8000856:      	ldrsb.w	r8, [r6, #0xe]
 800085a:      	ldrsb.w	r11, [r6, #0xf]
 800085e:      	ldrsb	r3, [r6], #16
 8000862:      	ldrsb	r4, [r6, #-15]
 8000866:      	cmn.w	r3, #0x41
 800086a:      	it	gt
 800086c:      	addgt	r2, #0x1
 800086e:      	ldrsb	r3, [r6, #-14]
 8000872:      	cmn.w	r4, #0x41
 8000876:      	it	gt
 8000878:      	addgt	r2, #0x1
 800087a:      	ldrsb	r4, [r6, #-13]
 800087e:      	cmn.w	r3, #0x41
 8000882:      	it	gt
 8000884:      	addgt	r2, #0x1
 8000886:      	ldrsb	r3, [r6, #-12]
 800088a:      	cmn.w	r4, #0x41
 800088e:      	it	gt
 8000890:      	addgt	r2, #0x1
 8000892:      	ldrsb	r4, [r6, #-11]
 8000896:      	cmn.w	r3, #0x41
 800089a:      	it	gt
 800089c:      	addgt	r2, #0x1
 800089e:      	ldrsb	r3, [r6, #-10]
 80008a2:      	cmn.w	r4, #0x41
 80008a6:      	it	gt
 80008a8:      	addgt	r2, #0x1
 80008aa:      	ldrsb	r4, [r6, #-9]
 80008ae:      	cmn.w	r3, #0x41
 80008b2:      	it	gt
 80008b4:      	addgt	r2, #0x1
 80008b6:      	ldrsb	r3, [r6, #-8]
 80008ba:      	cmn.w	r4, #0x41
 80008be:      	it	gt
 80008c0:      	addgt	r2, #0x1
 80008c2:      	ldrsb	r4, [r6, #-7]
 80008c6:      	cmn.w	r3, #0x41
 80008ca:      	it	gt
 80008cc:      	addgt	r2, #0x1
 80008ce:      	ldrsb	r3, [r6, #-6]
 80008d2:      	cmn.w	r4, #0x41
 80008d6:      	it	gt
 80008d8:      	addgt	r2, #0x1
 80008da:      	ldrsb	r4, [r6, #-5]
 80008de:      	cmn.w	r3, #0x41
 80008e2:      	it	gt
 80008e4:      	addgt	r2, #0x1
 80008e6:      	cmn.w	r4, #0x41
 80008ea:      	it	gt
 80008ec:      	addgt	r2, #0x1
 80008ee:      	cmn.w	r5, #0x41
 80008f2:      	it	gt
 80008f4:      	addgt	r2, #0x1
 80008f6:      	cmn.w	r9, #0x41
 80008fa:      	it	gt
 80008fc:      	addgt	r2, #0x1
 80008fe:      	cmn.w	r8, #0x41
 8000902:      	it	gt
 8000904:      	addgt	r2, #0x1
 8000906:      	cmn.w	r11, #0x41
 800090a:      	it	gt
 800090c:      	addgt	r2, #0x1
 800090e:      	subs	r1, #0x4
 8000910:      	bne	0x800084e <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x16c> @ imm = #-0xc6
 8000912:      	cmp.w	lr, #0x0
 8000916:      	beq.w	0x8000a4c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x36a> @ imm = #0x132
 800091a:      	ldrsb.w	r4, [r6]
 800091e:      	ldrsb.w	r5, [r6, #0x1]
 8000922:      	ldrsb.w	r1, [r6, #0x2]
 8000926:      	cmn.w	r4, #0x41
 800092a:      	ldrsb.w	r3, [r6, #0x3]
 800092e:      	it	gt
 8000930:      	addgt	r2, #0x1
 8000932:      	cmn.w	r5, #0x41
 8000936:      	it	gt
 8000938:      	addgt	r2, #0x1
 800093a:      	cmn.w	r1, #0x41
 800093e:      	it	gt
 8000940:      	addgt	r2, #0x1
 8000942:      	cmn.w	r3, #0x41
 8000946:      	it	gt
 8000948:      	addgt	r2, #0x1
 800094a:      	cmp.w	lr, #0x1
 800094e:      	bne	0x80009ca <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x2e8> @ imm = #0x78
 8000950:      	adds	r6, #0x4
 8000952:      	b	0x8000a4c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x36a> @ imm = #0xf6
 8000954:      	cmp	r6, #0x4
 8000956:      	bhi.w	0x8000830 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x14e> @ imm = #-0x12a
 800095a:      	sub.w	r10, r0, r6
 800095e:      	cmp.w	r10, #0x4
 8000962:      	blo.w	0x8000830 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x14e> @ imm = #-0x136
 8000966:      	and	r9, r10, #0x3
 800096a:      	cmp	r1, r8
 800096c:      	strd	r5, r4, [sp, #16]
 8000970:      	bne	0x8000a04 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x322> @ imm = #0x90
 8000972:      	movs	r3, #0x0
 8000974:      	b	0x8000d24 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x642> @ imm = #0x3ac
 8000976:      	movs	r2, #0x0
 8000978:      	b	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x79e
 800097a:      	subs	r0, r6, #0x4
 800097c:      	movs	r1, #0x1
 800097e:      	mov	r9, r5
 8000980:      	mov	r12, r6
 8000982:      	add.w	r0, r1, r0, lsr #2
 8000986:      	ands	lr, r0, #0x3
 800098a:      	beq	0x8000a18 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x336> @ imm = #0x8a
 800098c:      	ldrsb.w	r6, [r8, #0x1]
 8000990:      	movs	r2, #0x0
 8000992:      	ldrsb.w	r1, [r8]
 8000996:      	ldrsb.w	r5, [r8, #0x2]
 800099a:      	cmn.w	r6, #0x41
 800099e:      	ldrsb.w	r0, [r8, #0x3]
 80009a2:      	it	gt
 80009a4:      	movgt	r2, #0x1
 80009a6:      	cmn.w	r1, #0x41
 80009aa:      	it	gt
 80009ac:      	addgt	r2, #0x1
 80009ae:      	cmn.w	r5, #0x41
 80009b2:      	it	gt
 80009b4:      	addgt	r2, #0x1
 80009b6:      	cmn.w	r0, #0x41
 80009ba:      	it	gt
 80009bc:      	addgt	r2, #0x1
 80009be:      	cmp.w	lr, #0x1
 80009c2:      	bne	0x8000a92 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x3b0> @ imm = #0xcc
 80009c4:      	add.w	r1, r8, #0x4
 80009c8:      	b	0x8000b1c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x43a> @ imm = #0x150
 80009ca:      	ldrsb.w	r4, [r6, #0x4]
 80009ce:      	ldrsb.w	r5, [r6, #0x5]
 80009d2:      	ldrsb.w	r1, [r6, #0x6]
 80009d6:      	cmn.w	r4, #0x41
 80009da:      	ldrsb.w	r3, [r6, #0x7]
 80009de:      	it	gt
 80009e0:      	addgt	r2, #0x1
 80009e2:      	cmn.w	r5, #0x41
 80009e6:      	it	gt
 80009e8:      	addgt	r2, #0x1
 80009ea:      	cmn.w	r1, #0x41
 80009ee:      	it	gt
 80009f0:      	addgt	r2, #0x1
 80009f2:      	cmn.w	r3, #0x41
 80009f6:      	it	gt
 80009f8:      	addgt	r2, #0x1
 80009fa:      	cmp.w	lr, #0x2
 80009fe:      	bne	0x8000a1a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x338> @ imm = #0x18
 8000a00:      	adds	r6, #0x8
 8000a02:      	b	0x8000a4c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x36a> @ imm = #0x46
 8000a04:      	mvn.w	r2, r8
 8000a08:      	add	r1, r2
 8000a0a:      	and	r11, r6, #0x3
 8000a0e:      	cmp	r1, #0x3
 8000a10:      	bhs	0x8000ace <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x3ec> @ imm = #0xba
 8000a12:      	movs	r3, #0x0
 8000a14:      	mov	r2, r8
 8000a16:      	b	0x8000cee <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x60c> @ imm = #0x2d4
 8000a18:      	b	0x8000b1c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x43a> @ imm = #0x100
 8000a1a:      	ldrsb.w	r5, [r6, #0x8]
 8000a1e:      	ldrsb.w	r4, [r6, #0x9]
 8000a22:      	ldrsb.w	r1, [r6, #0xa]
 8000a26:      	cmn.w	r5, #0x41
 8000a2a:      	ldrsb.w	r3, [r6, #0xb]
 8000a2e:      	it	gt
 8000a30:      	addgt	r2, #0x1
 8000a32:      	cmn.w	r4, #0x41
 8000a36:      	it	gt
 8000a38:      	addgt	r2, #0x1
 8000a3a:      	adds	r6, #0xc
 8000a3c:      	cmn.w	r1, #0x41
 8000a40:      	it	gt
 8000a42:      	addgt	r2, #0x1
 8000a44:      	cmn.w	r3, #0x41
 8000a48:      	it	gt
 8000a4a:      	addgt	r2, #0x1
 8000a4c:      	ldr.w	r8, [sp, #0x20]
 8000a50:      	ands	r1, r0, #0x3
 8000a54:      	mov	r4, r10
 8000a56:      	mov	r5, r12
 8000a58:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x6be
 8000a5c:      	ldrsb.w	r3, [r6]
 8000a60:      	cmn.w	r3, #0x41
 8000a64:      	it	gt
 8000a66:      	addgt	r2, #0x1
 8000a68:      	cmp	r1, #0x1
 8000a6a:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x6ac
 8000a6e:      	ldr	r3, [sp, #0x1c]
 8000a70:      	add	r3, r8
 8000a72:      	ldrsb.w	r6, [r3, #0x5]
 8000a76:      	cmn.w	r6, #0x41
 8000a7a:      	it	gt
 8000a7c:      	addgt	r2, #0x1
 8000a7e:      	cmp	r1, #0x2
 8000a80:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x696
 8000a84:      	ldrsb.w	r1, [r3, #0x6]
 8000a88:      	cmn.w	r1, #0x41
 8000a8c:      	it	gt
 8000a8e:      	addgt	r2, #0x1
 8000a90:      	b	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x686
 8000a92:      	ldrsb.w	r5, [r8, #0x4]
 8000a96:      	ldrsb.w	r1, [r8, #0x5]
 8000a9a:      	ldrsb.w	r0, [r8, #0x6]
 8000a9e:      	cmn.w	r5, #0x41
 8000aa2:      	ldrsb.w	r6, [r8, #0x7]
 8000aa6:      	it	gt
 8000aa8:      	addgt	r2, #0x1
 8000aaa:      	cmn.w	r1, #0x41
 8000aae:      	it	gt
 8000ab0:      	addgt	r2, #0x1
 8000ab2:      	cmn.w	r0, #0x41
 8000ab6:      	it	gt
 8000ab8:      	addgt	r2, #0x1
 8000aba:      	cmn.w	r6, #0x41
 8000abe:      	it	gt
 8000ac0:      	addgt	r2, #0x1
 8000ac2:      	cmp.w	lr, #0x2
 8000ac6:      	bne	0x8000ae8 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x406> @ imm = #0x1e
 8000ac8:      	add.w	r1, r8, #0x8
 8000acc:      	b	0x8000b1c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x43a> @ imm = #0x4c
 8000ace:      	subs	r2, r6, #0x4
 8000ad0:      	movs	r1, #0x1
 8000ad2:      	cmp	r2, #0xc
 8000ad4:      	add.w	r1, r1, r2, lsr #2
 8000ad8:      	and	r12, r1, #0x3
 8000adc:      	str.w	r12, [sp, #0x1c]
 8000ae0:      	bhs	0x8000b60 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x47e> @ imm = #0x7c
 8000ae2:      	movs	r3, #0x0
 8000ae4:      	mov	r2, r8
 8000ae6:      	b	0x8000c42 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x560> @ imm = #0x158
 8000ae8:      	ldrsb.w	r6, [r8, #0x8]
 8000aec:      	ldrsb.w	r5, [r8, #0x9]
 8000af0:      	ldrsb.w	r0, [r8, #0xa]
 8000af4:      	cmn.w	r6, #0x41
 8000af8:      	ldrsb.w	r1, [r8, #0xb]
 8000afc:      	it	gt
 8000afe:      	addgt	r2, #0x1
 8000b00:      	cmn.w	r5, #0x41
 8000b04:      	it	gt
 8000b06:      	addgt	r2, #0x1
 8000b08:      	cmn.w	r0, #0x41
 8000b0c:      	it	gt
 8000b0e:      	addgt	r2, #0x1
 8000b10:      	cmn.w	r1, #0x41
 8000b14:      	add.w	r1, r8, #0xc
 8000b18:      	it	gt
 8000b1a:      	addgt	r2, #0x1
 8000b1c:      	mov	r0, r12
 8000b1e:      	mov	r5, r9
 8000b20:      	cmp	r3, #0x0
 8000b22:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x5f4
 8000b26:      	mov	r6, r0
 8000b28:      	ldrsb.w	r0, [r1]
 8000b2c:      	cmn.w	r0, #0x41
 8000b30:      	it	gt
 8000b32:      	addgt	r2, #0x1
 8000b34:      	mov	r0, r6
 8000b36:      	cmp	r3, #0x1
 8000b38:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x5de
 8000b3c:      	ldrsb.w	r0, [r1, #0x1]
 8000b40:      	cmn.w	r0, #0x41
 8000b44:      	it	gt
 8000b46:      	addgt	r2, #0x1
 8000b48:      	mov	r0, r6
 8000b4a:      	cmp	r3, #0x2
 8000b4c:      	beq.w	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x5ca
 8000b50:      	ldrsb.w	r0, [r1, #0x2]
 8000b54:      	cmn.w	r0, #0x41
 8000b58:      	mov	r0, r6
 8000b5a:      	it	gt
 8000b5c:      	addgt	r2, #0x1
 8000b5e:      	b	0x800111a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa38> @ imm = #0x5b8
 8000b60:      	mov	r2, r8
 8000b62:      	bic	r8, r1, #0x3
 8000b66:      	movs	r3, #0x0
 8000b68:      	strd	r11, r10, [sp]
 8000b6c:      	strd	r6, r9, [sp, #8]
 8000b70:      	ldrsb.w	lr, [r2, #0xc]
 8000b74:      	ldrsb.w	r12, [r2, #0xd]
 8000b78:      	ldrsb.w	r4, [r2, #0xe]
 8000b7c:      	ldrsb.w	r5, [r2, #0xf]
 8000b80:      	ldrsb	r9, [r2], #16
 8000b84:      	ldrsb	r11, [r2, #-15]
 8000b88:      	cmn.w	r9, #0x41
 8000b8c:      	it	gt
 8000b8e:      	addgt	r3, #0x1
 8000b90:      	ldrsb	r6, [r2, #-14]
 8000b94:      	cmn.w	r11, #0x41
 8000b98:      	it	gt
 8000b9a:      	addgt	r3, #0x1
 8000b9c:      	ldrsb	r1, [r2, #-13]
 8000ba0:      	cmn.w	r6, #0x41
 8000ba4:      	it	gt
 8000ba6:      	addgt	r3, #0x1
 8000ba8:      	ldrsb	r6, [r2, #-12]
 8000bac:      	cmn.w	r1, #0x41
 8000bb0:      	it	gt
 8000bb2:      	addgt	r3, #0x1
 8000bb4:      	ldrsb	r1, [r2, #-11]
 8000bb8:      	cmn.w	r6, #0x41
 8000bbc:      	it	gt
 8000bbe:      	addgt	r3, #0x1
 8000bc0:      	ldrsb	r6, [r2, #-10]
 8000bc4:      	cmn.w	r1, #0x41
 8000bc8:      	it	gt
 8000bca:      	addgt	r3, #0x1
 8000bcc:      	ldrsb	r1, [r2, #-9]
 8000bd0:      	cmn.w	r6, #0x41
 8000bd4:      	it	gt
 8000bd6:      	addgt	r3, #0x1
 8000bd8:      	ldrsb	r6, [r2, #-8]
 8000bdc:      	cmn.w	r1, #0x41
 8000be0:      	it	gt
 8000be2:      	addgt	r3, #0x1
 8000be4:      	ldrsb	r1, [r2, #-7]
 8000be8:      	cmn.w	r6, #0x41
 8000bec:      	it	gt
 8000bee:      	addgt	r3, #0x1
 8000bf0:      	ldrsb	r6, [r2, #-6]
 8000bf4:      	cmn.w	r1, #0x41
 8000bf8:      	it	gt
 8000bfa:      	addgt	r3, #0x1
 8000bfc:      	ldrsb	r1, [r2, #-5]
 8000c00:      	cmn.w	r6, #0x41
 8000c04:      	it	gt
 8000c06:      	addgt	r3, #0x1
 8000c08:      	cmn.w	r1, #0x41
 8000c0c:      	it	gt
 8000c0e:      	addgt	r3, #0x1
 8000c10:      	cmn.w	lr, #0x41
 8000c14:      	it	gt
 8000c16:      	addgt	r3, #0x1
 8000c18:      	cmn.w	r12, #0x41
 8000c1c:      	it	gt
 8000c1e:      	addgt	r3, #0x1
 8000c20:      	cmn.w	r4, #0x41
 8000c24:      	it	gt
 8000c26:      	addgt	r3, #0x1
 8000c28:      	cmn.w	r5, #0x41
 8000c2c:      	it	gt
 8000c2e:      	addgt	r3, #0x1
 8000c30:      	subs.w	r8, r8, #0x4
 8000c34:      	bne	0x8000b70 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x48e> @ imm = #-0xc8
 8000c36:      	ldrd	r6, r9, [sp, #8]
 8000c3a:      	ldrd	r11, r10, [sp]
 8000c3e:      	ldrd	r12, r8, [sp, #28]
 8000c42:      	cmp.w	r12, #0x0
 8000c46:      	beq	0x8000cee <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x60c> @ imm = #0xa4
 8000c48:      	ldrsb.w	r1, [r2]
 8000c4c:      	ldrsb.w	r4, [r2, #0x1]
 8000c50:      	ldrsb.w	lr, [r2, #0x2]
 8000c54:      	cmn.w	r1, #0x41
 8000c58:      	ldrsb.w	r12, [r2, #0x3]
 8000c5c:      	it	gt
 8000c5e:      	addgt	r3, #0x1
 8000c60:      	cmn.w	r4, #0x41
 8000c64:      	it	gt
 8000c66:      	addgt	r3, #0x1
 8000c68:      	cmn.w	lr, #0x41
 8000c6c:      	it	gt
 8000c6e:      	addgt	r3, #0x1
 8000c70:      	ldr	r1, [sp, #0x1c]
 8000c72:      	cmn.w	r12, #0x41
 8000c76:      	it	gt
 8000c78:      	addgt	r3, #0x1
 8000c7a:      	cmp	r1, #0x1
 8000c7c:      	bne	0x8000c82 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x5a0> @ imm = #0x2
 8000c7e:      	adds	r2, #0x4
 8000c80:      	b	0x8000cee <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x60c> @ imm = #0x6a
 8000c82:      	ldrsb.w	r1, [r2, #0x4]
 8000c86:      	ldrsb.w	r4, [r2, #0x5]
 8000c8a:      	ldrsb.w	lr, [r2, #0x6]
 8000c8e:      	cmn.w	r1, #0x41
 8000c92:      	ldrsb.w	r12, [r2, #0x7]
 8000c96:      	it	gt
 8000c98:      	addgt	r3, #0x1
 8000c9a:      	cmn.w	r4, #0x41
 8000c9e:      	it	gt
 8000ca0:      	addgt	r3, #0x1
 8000ca2:      	cmn.w	lr, #0x41
 8000ca6:      	it	gt
 8000ca8:      	addgt	r3, #0x1
 8000caa:      	cmn.w	r12, #0x41
 8000cae:      	it	gt
 8000cb0:      	addgt	r3, #0x1
 8000cb2:      	ldr	r1, [sp, #0x1c]
 8000cb4:      	cmp	r1, #0x2
 8000cb6:      	bne	0x8000cbc <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x5da> @ imm = #0x2
 8000cb8:      	adds	r2, #0x8
 8000cba:      	b	0x8000cee <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x60c> @ imm = #0x30
 8000cbc:      	ldrsb.w	r1, [r2, #0x8]
 8000cc0:      	ldrsb.w	r4, [r2, #0x9]
 8000cc4:      	ldrsb.w	lr, [r2, #0xa]
 8000cc8:      	cmn.w	r1, #0x41
 8000ccc:      	ldrsb.w	r12, [r2, #0xb]
 8000cd0:      	it	gt
 8000cd2:      	addgt	r3, #0x1
 8000cd4:      	cmn.w	r4, #0x41
 8000cd8:      	it	gt
 8000cda:      	addgt	r3, #0x1
 8000cdc:      	adds	r2, #0xc
 8000cde:      	cmn.w	lr, #0x41
 8000ce2:      	it	gt
 8000ce4:      	addgt	r3, #0x1
 8000ce6:      	cmn.w	r12, #0x41
 8000cea:      	it	gt
 8000cec:      	addgt	r3, #0x1
 8000cee:      	cmp.w	r11, #0x0
 8000cf2:      	beq	0x8000d24 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x642> @ imm = #0x2e
 8000cf4:      	ldrsb.w	r1, [r2]
 8000cf8:      	cmn.w	r1, #0x41
 8000cfc:      	it	gt
 8000cfe:      	addgt	r3, #0x1
 8000d00:      	cmp.w	r11, #0x1
 8000d04:      	beq	0x8000d24 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x642> @ imm = #0x1c
 8000d06:      	ldrsb.w	r1, [r2, #0x1]
 8000d0a:      	cmn.w	r1, #0x41
 8000d0e:      	it	gt
 8000d10:      	addgt	r3, #0x1
 8000d12:      	cmp.w	r11, #0x2
 8000d16:      	beq	0x8000d24 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x642> @ imm = #0xa
 8000d18:      	ldrsb.w	r1, [r2, #0x2]
 8000d1c:      	cmn.w	r1, #0x41
 8000d20:      	it	gt
 8000d22:      	addgt	r3, #0x1
 8000d24:      	add.w	r1, r8, r6
 8000d28:      	lsr.w	lr, r10, #0x2
 8000d2c:      	movs	r2, #0x0
 8000d2e:      	cmp.w	r9, #0x0
 8000d32:      	str	r0, [sp, #0x18]
 8000d34:      	beq	0x8000d6c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x68a> @ imm = #0x34
 8000d36:      	bic	r6, r10, #0x3
 8000d3a:      	add	r6, r1
 8000d3c:      	ldrsb.w	r4, [r6]
 8000d40:      	cmn.w	r4, #0x41
 8000d44:      	it	gt
 8000d46:      	movgt	r2, #0x1
 8000d48:      	cmp.w	r9, #0x1
 8000d4c:      	beq	0x8000d6c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x68a> @ imm = #0x1c
 8000d4e:      	ldrsb.w	r4, [r6, #0x1]
 8000d52:      	cmn.w	r4, #0x41
 8000d56:      	it	gt
 8000d58:      	addgt	r2, #0x1
 8000d5a:      	cmp.w	r9, #0x2
 8000d5e:      	beq	0x8000d6c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x68a> @ imm = #0xa
 8000d60:      	ldrsb.w	r6, [r6, #0x2]
 8000d64:      	cmn.w	r6, #0x41
 8000d68:      	it	gt
 8000d6a:      	addgt	r2, #0x1
 8000d6c:      	add	r2, r3
 8000d6e:      	b	0x8000d90 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x6ae> @ imm = #0x1e
 8000d70:      	uxtb16	r3, r9
 8000d74:      	uxtb16	r4, r9, ror #8
 8000d78:      	add	r3, r4
 8000d7a:      	sub.w	lr, lr, r8
 8000d7e:      	add.w	r1, r12, r8, lsl #2
 8000d82:      	ands	r6, r8, #0x3
 8000d86:      	add.w	r3, r3, r3, lsl #16
 8000d8a:      	add.w	r2, r2, r3, lsr #16
 8000d8e:      	bne	0x8000e12 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x730> @ imm = #0x80
 8000d90:      	cmp.w	lr, #0x0
 8000d94:      	beq	0x8000e0c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x72a> @ imm = #0x74
 8000d96:      	cmp.w	lr, #0xc0
 8000d9a:      	mov	r8, lr
 8000d9c:      	mov	r12, r1
 8000d9e:      	it	hs
 8000da0:      	movhs.w	r8, #0xc0
 8000da4:      	ands	r1, r8, #0xfc
 8000da8:      	mov.w	r9, #0x0
 8000dac:      	add.w	r0, r12, r1, lsl #2
 8000db0:      	beq	0x8000d70 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x68e> @ imm = #-0x44
 8000db2:      	mov	r1, r12
 8000db4:      	cmp	r1, #0x0
 8000db6:      	itttt	ne
 8000db8:      	ldmne.w	r1!, {r4, r5, r6, r11}
 8000dbc:      	mvnne.w	r10, r4
 8000dc0:      	lsrne.w	r3, r10, #0x7
 8000dc4:      	orrne.w	r3, r3, r4, lsr #6
 8000dc8:      	itttt	ne
 8000dca:      	bicne	r3, r3, #0xfefefefe
 8000dce:      	addne	r3, r9
 8000dd0:      	mvnne	r4, r5
 8000dd2:      	lsrne	r4, r4, #0x7
 8000dd4:      	itttt	ne
 8000dd6:      	orrne.w	r4, r4, r5, lsr #6
 8000dda:      	bicne	r4, r4, #0xfefefefe
 8000dde:      	addne	r3, r4
 8000de0:      	mvnne	r4, r6
 8000de2:      	itttt	ne
 8000de4:      	lsrne	r4, r4, #0x7
 8000de6:      	orrne.w	r4, r4, r6, lsr #6
 8000dea:      	bicne	r4, r4, #0xfefefefe
 8000dee:      	addne	r3, r4
 8000df0:      	itttt	ne
 8000df2:      	mvnne.w	r4, r11
 8000df6:      	lsrne	r4, r4, #0x7
 8000df8:      	orrne.w	r4, r4, r11, lsr #6
 8000dfc:      	bicne	r4, r4, #0xfefefefe
 8000e00:      	itt	ne
 8000e02:      	addne.w	r9, r4, r3
 8000e06:      	cmpne	r1, r0
 8000e08:      	bne	0x8000db4 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x6d2> @ imm = #-0x58
 8000e0a:      	b	0x8000d70 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x68e> @ imm = #-0x9e
 8000e0c:      	ldr.w	r8, [sp, #0x20]
 8000e10:      	b	0x8001114 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa32> @ imm = #0x300
 8000e12:      	cmp.w	r12, #0x0
 8000e16:      	beq	0x8000e2e <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x74c> @ imm = #0x14
 8000e18:      	subs	r1, r6, #0x1
 8000e1a:      	bic	r3, r1, #0xc0000000
 8000e1e:      	adds	r1, r3, #0x1
 8000e20:      	cmp	r3, #0x3
 8000e22:      	and	lr, r1, #0x3
 8000e26:      	bhs	0x8000e38 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x756> @ imm = #0xe
 8000e28:      	mov.w	r9, #0x0
 8000e2c:      	b	0x80010b4 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x9d2> @ imm = #0x284
 8000e2e:      	mov.w	r9, #0x0
 8000e32:      	ldr.w	r8, [sp, #0x20]
 8000e36:      	b	0x8001102 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa20> @ imm = #0x2c8
 8000e38:      	bic	r1, r1, #0x3
 8000e3c:      	subs	r3, r1, #0x4
 8000e3e:      	movs	r1, #0x1
 8000e40:      	cmp	r3, #0xc
 8000e42:      	add.w	r1, r1, r3, lsr #2
 8000e46:      	and	r12, r1, #0x3
 8000e4a:      	bhs	0x8000e52 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x770> @ imm = #0x4
 8000e4c:      	mov.w	r9, #0x0
 8000e50:      	b	0x8000fb4 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x8d2> @ imm = #0x160
 8000e52:      	movw	r3, #0xfffc
 8000e56:      	mov.w	r9, #0x0
 8000e5a:      	movt	r3, #0x7fff
 8000e5e:      	and.w	r8, r1, r3
 8000e62:      	ldm.w	r0, {r1, r3, r5}
 8000e66:      	subs.w	r8, r8, #0x4
 8000e6a:      	ldr	r4, [r0, #0xc]
 8000e6c:      	mvn.w	r6, r1
 8000e70:      	ldr.w	r10, [r0, #0x38]
 8000e74:      	lsr.w	r6, r6, #0x7
 8000e78:      	orr.w	r1, r6, r1, lsr #6
 8000e7c:      	bic	r1, r1, #0xfefefefe
 8000e80:      	add.w	r6, r1, r9
 8000e84:      	mvn.w	r1, r3
 8000e88:      	lsr.w	r1, r1, #0x7
 8000e8c:      	ldr.w	r9, [r0, #0x3c]
 8000e90:      	orr.w	r1, r1, r3, lsr #6
 8000e94:      	bic	r3, r1, #0xfefefefe
 8000e98:      	add	r6, r3
 8000e9a:      	mvn.w	r3, r5
 8000e9e:      	lsr.w	r1, r3, #0x7
 8000ea2:      	ldr	r3, [r0, #0x14]
 8000ea4:      	orr.w	r1, r1, r5, lsr #6
 8000ea8:      	ldr	r5, [r0, #0x10]
 8000eaa:      	bic	r1, r1, #0xfefefefe
 8000eae:      	add	r1, r6
 8000eb0:      	mvn.w	r6, r4
 8000eb4:      	lsr.w	r6, r6, #0x7
 8000eb8:      	orr.w	r4, r6, r4, lsr #6
 8000ebc:      	bic	r4, r4, #0xfefefefe
 8000ec0:      	ldr	r6, [r0, #0x18]
 8000ec2:      	add	r1, r4
 8000ec4:      	mvn.w	r4, r5
 8000ec8:      	lsr.w	r4, r4, #0x7
 8000ecc:      	orr.w	r4, r4, r5, lsr #6
 8000ed0:      	ldr	r5, [r0, #0x1c]
 8000ed2:      	bic	r4, r4, #0xfefefefe
 8000ed6:      	add	r1, r4
 8000ed8:      	mvn.w	r4, r3
 8000edc:      	lsr.w	r4, r4, #0x7
 8000ee0:      	orr.w	r3, r4, r3, lsr #6
 8000ee4:      	bic	r3, r3, #0xfefefefe
 8000ee8:      	ldr	r4, [r0, #0x20]
 8000eea:      	add	r1, r3
 8000eec:      	mvn.w	r3, r6
 8000ef0:      	lsr.w	r3, r3, #0x7
 8000ef4:      	orr.w	r3, r3, r6, lsr #6
 8000ef8:      	ldr	r6, [r0, #0x24]
 8000efa:      	bic	r3, r3, #0xfefefefe
 8000efe:      	add	r1, r3
 8000f00:      	mvn.w	r3, r5
 8000f04:      	lsr.w	r3, r3, #0x7
 8000f08:      	orr.w	r3, r3, r5, lsr #6
 8000f0c:      	ldr	r5, [r0, #0x28]
 8000f0e:      	bic	r3, r3, #0xfefefefe
 8000f12:      	add	r1, r3
 8000f14:      	mvn.w	r3, r4
 8000f18:      	lsr.w	r3, r3, #0x7
 8000f1c:      	orr.w	r3, r3, r4, lsr #6
 8000f20:      	ldr	r4, [r0, #0x2c]
 8000f22:      	bic	r3, r3, #0xfefefefe
 8000f26:      	add	r1, r3
 8000f28:      	mvn.w	r3, r6
 8000f2c:      	lsr.w	r3, r3, #0x7
 8000f30:      	orr.w	r3, r3, r6, lsr #6
 8000f34:      	ldr	r6, [r0, #0x30]
 8000f36:      	bic	r3, r3, #0xfefefefe
 8000f3a:      	add	r1, r3
 8000f3c:      	mvn.w	r3, r5
 8000f40:      	lsr.w	r3, r3, #0x7
 8000f44:      	orr.w	r3, r3, r5, lsr #6
 8000f48:      	ldr	r5, [r0, #0x34]
 8000f4a:      	bic	r3, r3, #0xfefefefe
 8000f4e:      	add.w	r0, r0, #0x40
 8000f52:      	add	r1, r3
 8000f54:      	mvn.w	r3, r4
 8000f58:      	lsr.w	r3, r3, #0x7
 8000f5c:      	orr.w	r3, r3, r4, lsr #6
 8000f60:      	bic	r3, r3, #0xfefefefe
 8000f64:      	add	r1, r3
 8000f66:      	mvn.w	r3, r6
 8000f6a:      	lsr.w	r3, r3, #0x7
 8000f6e:      	orr.w	r3, r3, r6, lsr #6
 8000f72:      	bic	r3, r3, #0xfefefefe
 8000f76:      	add	r1, r3
 8000f78:      	mvn.w	r3, r5
 8000f7c:      	lsr.w	r3, r3, #0x7
 8000f80:      	orr.w	r3, r3, r5, lsr #6
 8000f84:      	bic	r3, r3, #0xfefefefe
 8000f88:      	add	r1, r3
 8000f8a:      	mvn.w	r3, r10
 8000f8e:      	lsr.w	r3, r3, #0x7
 8000f92:      	orr.w	r3, r3, r10, lsr #6
 8000f96:      	bic	r3, r3, #0xfefefefe
 8000f9a:      	add	r1, r3
 8000f9c:      	mvn.w	r3, r9
 8000fa0:      	lsr.w	r3, r3, #0x7
 8000fa4:      	orr.w	r3, r3, r9, lsr #6
 8000fa8:      	bic	r3, r3, #0xfefefefe
 8000fac:      	add.w	r9, r3, r1
 8000fb0:      	bne.w	0x8000e62 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x780> @ imm = #-0x152
 8000fb4:      	ldr.w	r8, [sp, #0x20]
 8000fb8:      	cmp.w	r12, #0x0
 8000fbc:      	beq	0x80010b8 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x9d6> @ imm = #0xf8
 8000fbe:      	ldm.w	r0, {r1, r3, r5, r8}
 8000fc2:      	mvns	r4, r3
 8000fc4:      	lsrs	r4, r4, #0x7
 8000fc6:      	orr.w	r3, r4, r3, lsr #6
 8000fca:      	cmp.w	r12, #0x1
 8000fce:      	mvn.w	r6, r1
 8000fd2:      	bic	r3, r3, #0xfefefefe
 8000fd6:      	lsr.w	r6, r6, #0x7
 8000fda:      	orr.w	r1, r6, r1, lsr #6
 8000fde:      	bic	r1, r1, #0xfefefefe
 8000fe2:      	add	r1, r9
 8000fe4:      	add	r1, r3
 8000fe6:      	mvn.w	r3, r5
 8000fea:      	lsr.w	r3, r3, #0x7
 8000fee:      	orr.w	r3, r3, r5, lsr #6
 8000ff2:      	bic	r3, r3, #0xfefefefe
 8000ff6:      	add	r1, r3
 8000ff8:      	mvn.w	r3, r8
 8000ffc:      	lsr.w	r3, r3, #0x7
 8001000:      	orr.w	r3, r3, r8, lsr #6
 8001004:      	bic	r3, r3, #0xfefefefe
 8001008:      	add.w	r9, r3, r1
 800100c:      	bne	0x8001012 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x930> @ imm = #0x2
 800100e:      	adds	r0, #0x10
 8001010:      	b	0x80010b4 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x9d2> @ imm = #0xa0
 8001012:      	add.w	r8, r0, #0x10
 8001016:      	cmp.w	r12, #0x2
 800101a:      	ldm.w	r8, {r1, r3, r5, r8}
 800101e:      	mvn.w	r4, r3
 8001022:      	lsr.w	r4, r4, #0x7
 8001026:      	orr.w	r3, r4, r3, lsr #6
 800102a:      	mvn.w	r6, r1
 800102e:      	bic	r3, r3, #0xfefefefe
 8001032:      	lsr.w	r6, r6, #0x7
 8001036:      	orr.w	r1, r6, r1, lsr #6
 800103a:      	bic	r1, r1, #0xfefefefe
 800103e:      	add	r1, r9
 8001040:      	add	r1, r3
 8001042:      	mvn.w	r3, r5
 8001046:      	lsr.w	r3, r3, #0x7
 800104a:      	orr.w	r3, r3, r5, lsr #6
 800104e:      	bic	r3, r3, #0xfefefefe
 8001052:      	add	r1, r3
 8001054:      	mvn.w	r3, r8
 8001058:      	lsr.w	r3, r3, #0x7
 800105c:      	orr.w	r3, r3, r8, lsr #6
 8001060:      	bic	r3, r3, #0xfefefefe
 8001064:      	add.w	r9, r3, r1
 8001068:      	bne	0x800106e <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x98c> @ imm = #0x2
 800106a:      	adds	r0, #0x20
 800106c:      	b	0x80010b4 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0x9d2> @ imm = #0x44
 800106e:      	add.w	r12, r0, #0x20
 8001072:      	adds	r0, #0x30
 8001074:      	ldm.w	r12, {r1, r3, r6, r12}
 8001078:      	mvns	r4, r3
 800107a:      	lsrs	r4, r4, #0x7
 800107c:      	orr.w	r3, r4, r3, lsr #6
 8001080:      	mvns	r5, r1
 8001082:      	bic	r3, r3, #0xfefefefe
 8001086:      	lsrs	r5, r5, #0x7
 8001088:      	orr.w	r1, r5, r1, lsr #6
 800108c:      	bic	r1, r1, #0xfefefefe
 8001090:      	add	r1, r9
 8001092:      	add	r1, r3
 8001094:      	mvns	r3, r6
 8001096:      	lsrs	r3, r3, #0x7
 8001098:      	orr.w	r3, r3, r6, lsr #6
 800109c:      	bic	r3, r3, #0xfefefefe
 80010a0:      	add	r1, r3
 80010a2:      	mvn.w	r3, r12
 80010a6:      	lsrs	r3, r3, #0x7
 80010a8:      	orr.w	r3, r3, r12, lsr #6
 80010ac:      	bic	r3, r3, #0xfefefefe
 80010b0:      	add.w	r9, r3, r1
 80010b4:      	ldr.w	r8, [sp, #0x20]
 80010b8:      	cmp.w	lr, #0x0
 80010bc:      	beq	0x8001102 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa20> @ imm = #0x42
 80010be:      	ldr	r1, [r0]
 80010c0:      	cmp.w	lr, #0x1
 80010c4:      	mvn.w	r3, r1
 80010c8:      	lsr.w	r3, r3, #0x7
 80010cc:      	orr.w	r1, r3, r1, lsr #6
 80010d0:      	bic	r1, r1, #0xfefefefe
 80010d4:      	add	r9, r1
 80010d6:      	beq	0x8001102 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa20> @ imm = #0x28
 80010d8:      	ldr	r1, [r0, #0x4]
 80010da:      	cmp.w	lr, #0x2
 80010de:      	mvn.w	r3, r1
 80010e2:      	lsr.w	r3, r3, #0x7
 80010e6:      	orr.w	r1, r3, r1, lsr #6
 80010ea:      	bic	r1, r1, #0xfefefefe
 80010ee:      	add	r9, r1
 80010f0:      	beq	0x8001102 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa20> @ imm = #0xe
 80010f2:      	ldr	r0, [r0, #0x8]
 80010f4:      	mvns	r1, r0
 80010f6:      	lsrs	r1, r1, #0x7
 80010f8:      	orr.w	r0, r1, r0, lsr #6
 80010fc:      	bic	r0, r0, #0xfefefefe
 8001100:      	add	r9, r0
 8001102:      	uxtb16	r0, r9
 8001106:      	uxtb16	r1, r9, ror #8
 800110a:      	add	r0, r1
 800110c:      	add.w	r0, r0, r0, lsl #16
 8001110:      	add.w	r2, r2, r0, lsr #16
 8001114:      	ldr	r0, [sp, #0x18]
 8001116:      	ldrd	r5, r4, [sp, #16]
 800111a:      	cmp	r5, r2
 800111c:      	bls	0x800113c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa5a> @ imm = #0x1c
 800111e:      	mov	r10, r0
 8001120:      	ldrb.w	r0, [r4, #0x20]
 8001124:      	subs	r2, r5, r2
 8001126:      	subs	r1, r0, #0x3
 8001128:      	it	ne
 800112a:      	movne	r1, r0
 800112c:      	lsls	r0, r1, #0x1e
 800112e:      	beq	0x8001154 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa72> @ imm = #0x22
 8001130:      	cmp	r1, #0x1
 8001132:      	bne	0x8001158 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa76> @ imm = #0x22
 8001134:      	mov.w	r9, #0x0
 8001138:      	mov	r1, r2
 800113a:      	b	0x8001160 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa7e> @ imm = #0x22
 800113c:      	ldr	r1, [r4]
 800113e:      	mov	r2, r0
 8001140:      	ldr	r0, [r4, #0x4]
 8001142:      	ldr	r3, [r0, #0xc]
 8001144:      	mov	r0, r1
 8001146:      	mov	r1, r8
 8001148:      	add	sp, #0x24
 800114a:      	pop.w	{r8, r9, r10, r11}
 800114e:      	pop.w	{r4, r5, r6, r7, lr}
 8001152:      	bx	r3
 8001154:      	mov	r9, r2
 8001156:      	b	0x8001160 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa7e> @ imm = #0x6
 8001158:      	adds	r0, r2, #0x1
 800115a:      	lsrs	r1, r2, #0x1
 800115c:      	lsr.w	r9, r0, #0x1
 8001160:      	ldrd	r11, r5, [r4]
 8001164:      	adds	r6, r1, #0x1
 8001166:      	ldr	r4, [r4, #0x1c]
 8001168:      	subs	r6, #0x1
 800116a:      	beq	0x800117a <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa98> @ imm = #0xc
 800116c:      	ldr	r2, [r5, #0x10]
 800116e:      	mov	r0, r11
 8001170:      	mov	r1, r4
 8001172:      	blx	r2
 8001174:      	cmp	r0, #0x0
 8001176:      	beq	0x8001168 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xa86> @ imm = #-0x12
 8001178:      	b	0x800118c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xaaa> @ imm = #0x10
 800117a:      	cmp.w	r4, #0x110000
 800117e:      	beq	0x800118c <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xaaa> @ imm = #0xa
 8001180:      	ldr	r3, [r5, #0xc]
 8001182:      	mov	r0, r11
 8001184:      	mov	r1, r8
 8001186:      	mov	r2, r10
 8001188:      	blx	r3
 800118a:      	cbz	r0, 0x8001196 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xab4> @ imm = #0x8
 800118c:      	movs	r0, #0x1
 800118e:      	add	sp, #0x24
 8001190:      	pop.w	{r8, r9, r10, r11}
 8001194:      	pop	{r4, r5, r6, r7, pc}
 8001196:      	movs	r6, #0x0
 8001198:      	cmp	r9, r6
 800119a:      	beq	0x80011ae <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xacc> @ imm = #0x10
 800119c:      	ldr	r2, [r5, #0x10]
 800119e:      	mov	r0, r11
 80011a0:      	mov	r1, r4
 80011a2:      	blx	r2
 80011a4:      	adds	r6, #0x1
 80011a6:      	cmp	r0, #0x0
 80011a8:      	beq	0x8001198 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xab6> @ imm = #-0x14
 80011aa:      	subs	r1, r6, #0x1
 80011ac:      	b	0x80011b0 <core::fmt::Formatter::pad::h5a208f7ba86c70f9+0xace> @ imm = #0x0
 80011ae:      	mov	r1, r9
 80011b0:      	movs	r0, #0x0
 80011b2:      	cmp	r1, r9
 80011b4:      	it	lo
 80011b6:      	movlo	r0, #0x1
 80011b8:      	add	sp, #0x24
 80011ba:      	pop.w	{r8, r9, r10, r11}
 80011be:      	pop	{r4, r5, r6, r7, pc}

080011c0 <core::panicking::panic::h493a9d527244de3a>:
 80011c0:      	push	{r7, lr}
 80011c2:      	mov	r7, sp
 80011c4:      	sub	sp, #0x20
 80011c6:      	mov	r1, r0
 80011c8:      	movs	r0, #0x1
 80011ca:      	str	r0, [sp, #0xc]
 80011cc:      	add	r0, sp, #0x18
 80011ce:      	str	r0, [sp, #0x8]
 80011d0:      	movs	r0, #0x0
 80011d2:      	str	r0, [sp, #0x14]
 80011d4:      	movw	r2, #0x1a90
 80011d8:      	str	r0, [sp]
 80011da:      	movs	r0, #0x2b
 80011dc:      	str	r0, [sp, #0x1c]
 80011de:      	movw	r0, #0x190c
 80011e2:      	movt	r0, #0x800
 80011e6:      	movt	r2, #0x800
 80011ea:      	str	r0, [sp, #0x18]
 80011ec:      	mov	r0, sp
 80011ee:      	str	r2, [sp, #0x10]
 80011f0:      	bl	0x80003da <core::panicking::panic_fmt::h5ed22fe37569ff8d> @ imm = #-0xe1a
 80011f4:      	trap

080011f6 <<&T as core::fmt::Display>::fmt::h50b3c546b3b70842>:
 80011f6:      	mov	r3, r1
 80011f8:      	ldrd	r1, r2, [r0]
 80011fc:      	mov	r0, r3
 80011fe:      	b.w	0x80006e2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9> @ imm = #-0xb20

08001202 <core::fmt::write::h41d1056afb849d0f>:
 8001202:      	push	{r4, r5, r6, r7, lr}
 8001204:      	add	r7, sp, #0xc
 8001206:      	push.w	{r8, r9, r10, r11}
 800120a:      	sub	sp, #0x2c
 800120c:      	mov	r11, r2
 800120e:      	movs	r2, #0x3
 8001210:      	ldr.w	r10, [r11]
 8001214:      	strb.w	r2, [sp, #0x28]
 8001218:      	movs	r2, #0x20
 800121a:      	str	r2, [sp, #0x24]
 800121c:      	movs	r2, #0x0
 800121e:      	cmp.w	r10, #0x0
 8001222:      	str	r2, [sp, #0x20]
 8001224:      	str	r2, [sp, #0x18]
 8001226:      	strd	r1, r2, [sp, #12]
 800122a:      	str	r0, [sp, #0x8]
 800122c:      	beq	0x8001312 <core::fmt::write::h41d1056afb849d0f+0x110> @ imm = #0xe2
 800122e:      	ldr.w	r0, [r11, #0x4]
 8001232:      	cmp	r0, #0x0
 8001234:      	beq.w	0x8001368 <core::fmt::write::h41d1056afb849d0f+0x166> @ imm = #0x130
 8001238:      	ldr.w	r9, [r11, #0x8]
 800123c:      	lsls	r1, r0, #0x5
 800123e:      	subs	r0, #0x1
 8001240:      	movs	r4, #0x0
 8001242:      	bic	r0, r0, #0xf8000000
 8001246:      	mov.w	r8, #0x0
 800124a:      	adds	r0, #0x1
 800124c:      	str	r1, [sp, #0x4]
 800124e:      	str	r0, [sp]
 8001250:      	add.w	r0, r9, r8
 8001254:      	ldr	r2, [r0, #0x4]
 8001256:      	cbz	r2, 0x800126a <core::fmt::write::h41d1056afb849d0f+0x68> @ imm = #0x10
 8001258:      	ldrd	r0, r3, [sp, #8]
 800125c:      	ldr.w	r1, [r9, r8]
 8001260:      	ldr	r3, [r3, #0xc]
 8001262:      	blx	r3
 8001264:      	cmp	r0, #0x0
 8001266:      	bne.w	0x800138e <core::fmt::write::h41d1056afb849d0f+0x18c> @ imm = #0x124
 800126a:      	add.w	r0, r10, r8, lsl #2
 800126e:      	ldr.w	r1, [r11, #0x10]
 8001272:      	ldrd	r2, r5, [r0, #20]
 8001276:      	ldr	r3, [r0, #0xc]
 8001278:      	ldrb	r6, [r0, #0x1c]
 800127a:      	str	r2, [sp, #0x20]
 800127c:      	add.w	r2, r10, r4
 8001280:      	str	r5, [sp, #0x24]
 8001282:      	strb.w	r6, [sp, #0x28]
 8001286:      	ldr	r2, [r2, #0x10]
 8001288:      	cbz	r3, 0x80012b2 <core::fmt::write::h41d1056afb849d0f+0xb0> @ imm = #0x26
 800128a:      	cmp	r3, #0x1
 800128c:      	bne	0x80012a0 <core::fmt::write::h41d1056afb849d0f+0x9e> @ imm = #0x10
 800128e:      	add.w	r2, r1, r2, lsl #3
 8001292:      	movw	r6, #0x3d7
 8001296:      	movt	r6, #0x800
 800129a:      	ldr	r3, [r2, #0x4]
 800129c:      	cmp	r3, r6
 800129e:      	beq	0x80012ae <core::fmt::write::h41d1056afb849d0f+0xac> @ imm = #0xc
 80012a0:      	movs	r3, #0x0
 80012a2:      	strd	r3, r2, [sp, #16]
 80012a6:      	ldrd	r2, r0, [r0, #4]
 80012aa:      	cbnz	r2, 0x80012be <core::fmt::write::h41d1056afb849d0f+0xbc> @ imm = #0x10
 80012ac:      	b	0x80012dc <core::fmt::write::h41d1056afb849d0f+0xda> @ imm = #0x2c
 80012ae:      	ldr	r2, [r2]
 80012b0:      	ldr	r2, [r2]
 80012b2:      	movs	r3, #0x1
 80012b4:      	strd	r3, r2, [sp, #16]
 80012b8:      	ldrd	r2, r0, [r0, #4]
 80012bc:      	cbz	r2, 0x80012dc <core::fmt::write::h41d1056afb849d0f+0xda> @ imm = #0x1c
 80012be:      	cmp	r2, #0x1
 80012c0:      	bne	0x80012d4 <core::fmt::write::h41d1056afb849d0f+0xd2> @ imm = #0x10
 80012c2:      	add.w	r0, r1, r0, lsl #3
 80012c6:      	movw	r3, #0x3d7
 80012ca:      	movt	r3, #0x800
 80012ce:      	ldr	r2, [r0, #0x4]
 80012d0:      	cmp	r2, r3
 80012d2:      	beq	0x80012d8 <core::fmt::write::h41d1056afb849d0f+0xd6> @ imm = #0x2
 80012d4:      	movs	r2, #0x0
 80012d6:      	b	0x80012de <core::fmt::write::h41d1056afb849d0f+0xdc> @ imm = #0x4
 80012d8:      	ldr	r0, [r0]
 80012da:      	ldr	r0, [r0]
 80012dc:      	movs	r2, #0x1
 80012de:      	ldr.w	r3, [r10, r4]
 80012e2:      	str	r0, [sp, #0x1c]
 80012e4:      	ldr.w	r0, [r1, r3, lsl #3]
 80012e8:      	add.w	r1, r1, r3, lsl #3
 80012ec:      	ldr	r3, [r1, #0x4]
 80012ee:      	add	r1, sp, #0x8
 80012f0:      	str	r2, [sp, #0x18]
 80012f2:      	blx	r3
 80012f4:      	cmp	r0, #0x0
 80012f6:      	bne	0x800138e <core::fmt::write::h41d1056afb849d0f+0x18c> @ imm = #0x94
 80012f8:      	ldr	r0, [sp, #0x4]
 80012fa:      	adds	r4, #0x20
 80012fc:      	add.w	r8, r8, #0x8
 8001300:      	cmp	r0, r4
 8001302:      	bne	0x8001250 <core::fmt::write::h41d1056afb849d0f+0x4e> @ imm = #-0xb6
 8001304:      	ldr.w	r9, [sp]
 8001308:      	ldr.w	r0, [r11, #0xc]
 800130c:      	cmp	r9, r0
 800130e:      	blo	0x8001374 <core::fmt::write::h41d1056afb849d0f+0x172> @ imm = #0x62
 8001310:      	b	0x8001398 <core::fmt::write::h41d1056afb849d0f+0x196> @ imm = #0x84
 8001312:      	ldr.w	r0, [r11, #0x14]
 8001316:      	cbz	r0, 0x8001368 <core::fmt::write::h41d1056afb849d0f+0x166> @ imm = #0x4e
 8001318:      	ldr.w	r1, [r11, #0x10]
 800131c:      	lsls	r4, r0, #0x3
 800131e:      	subs	r0, #0x1
 8001320:      	ldr.w	r2, [r11, #0x8]
 8001324:      	bic	r0, r0, #0xe0000000
 8001328:      	adds	r6, r1, #0x4
 800132a:      	adds	r5, r2, #0x4
 800132c:      	add.w	r9, r0, #0x1
 8001330:      	add.w	r8, sp, #0x8
 8001334:      	ldr	r2, [r5]
 8001336:      	cbz	r2, 0x8001346 <core::fmt::write::h41d1056afb849d0f+0x144> @ imm = #0xc
 8001338:      	ldrd	r0, r3, [sp, #8]
 800133c:      	ldr	r1, [r5, #-4]
 8001340:      	ldr	r3, [r3, #0xc]
 8001342:      	blx	r3
 8001344:      	cbnz	r0, 0x800138e <core::fmt::write::h41d1056afb849d0f+0x18c> @ imm = #0x46
 8001346:      	ldr	r0, [r6, #-4]
 800134a:      	mov	r1, r8
 800134c:      	ldr	r2, [r6]
 800134e:      	blx	r2
 8001350:      	cbnz	r0, 0x800138e <core::fmt::write::h41d1056afb849d0f+0x18c> @ imm = #0x3a
 8001352:      	subs	r4, #0x8
 8001354:      	add.w	r6, r6, #0x8
 8001358:      	add.w	r5, r5, #0x8
 800135c:      	bne	0x8001334 <core::fmt::write::h41d1056afb849d0f+0x132> @ imm = #-0x2c
 800135e:      	ldr.w	r0, [r11, #0xc]
 8001362:      	cmp	r9, r0
 8001364:      	blo	0x8001374 <core::fmt::write::h41d1056afb849d0f+0x172> @ imm = #0xc
 8001366:      	b	0x8001398 <core::fmt::write::h41d1056afb849d0f+0x196> @ imm = #0x2e
 8001368:      	mov.w	r9, #0x0
 800136c:      	ldr.w	r0, [r11, #0xc]
 8001370:      	cmp	r9, r0
 8001372:      	bhs	0x8001398 <core::fmt::write::h41d1056afb849d0f+0x196> @ imm = #0x22
 8001374:      	ldr.w	r2, [r11, #0x8]
 8001378:      	mov	r6, r9
 800137a:      	ldrd	r0, r1, [sp, #8]
 800137e:      	ldr	r3, [r1, #0xc]
 8001380:      	ldr.w	r1, [r2, r9, lsl #3]
 8001384:      	add.w	r2, r2, r9, lsl #3
 8001388:      	ldr	r2, [r2, #0x4]
 800138a:      	blx	r3
 800138c:      	cbz	r0, 0x8001398 <core::fmt::write::h41d1056afb849d0f+0x196> @ imm = #0x8
 800138e:      	movs	r0, #0x1
 8001390:      	add	sp, #0x2c
 8001392:      	pop.w	{r8, r9, r10, r11}
 8001396:      	pop	{r4, r5, r6, r7, pc}
 8001398:      	movs	r0, #0x0
 800139a:      	add	sp, #0x2c
 800139c:      	pop.w	{r8, r9, r10, r11}
 80013a0:      	pop	{r4, r5, r6, r7, pc}

080013a2 <<&T as core::fmt::Display>::fmt::h85a2c5e4281a395e>:
 80013a2:      	push	{r4, r5, r6, r7, lr}
 80013a4:      	add	r7, sp, #0xc
 80013a6:      	push.w	{r8, r9, r11}
 80013aa:      	sub	sp, #0x18
 80013ac:      	ldr.w	lr, [r0]
 80013b0:      	mov	r2, sp
 80013b2:      	ldrd	r12, r1, [r1]
 80013b6:      	mov	r3, r2
 80013b8:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 80013bc:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 80013c0:      	mov	r0, r12
 80013c2:      	bl	0x8001202 <core::fmt::write::h41d1056afb849d0f> @ imm = #-0x1c4
 80013c6:      	add	sp, #0x18
 80013c8:      	pop.w	{r8, r9, r11}
 80013cc:      	pop	{r4, r5, r6, r7, pc}

080013ce <<&T as core::fmt::Display>::fmt::h1855a90fe3226b1f>:
 80013ce:      	ldr	r0, [r0]
 80013d0:      	mov	r3, r1
 80013d2:      	ldrd	r1, r2, [r0]
 80013d6:      	mov	r0, r3
 80013d8:      	b.w	0x80006e2 <core::fmt::Formatter::pad::h5a208f7ba86c70f9> @ imm = #-0xcfa

080013dc <cortex_m::itm::write_all::h323641e67bf5c27a>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 80013dc:      	push	{r4, r5, r7, lr}
 80013de:      	add	r7, sp, #0x8
;         if len == 0 {
 80013e0:      	cmp	r2, #0x0
 80013e2:      	beq.w	0x80014e6 <cortex_m::itm::write_all::h323641e67bf5c27a+0x10a> @ imm = #0x100
;         if ptr as usize % 2 == 1 {
 80013e6:      	lsls	r3, r1, #0x1f
 80013e8:      	beq	0x800140c <cortex_m::itm::write_all::h323641e67bf5c27a+0x30> @ imm = #0x20
 80013ea:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 80013ec:      	lsls	r3, r3, #0x1f
 80013ee:      	bne	0x8001404 <cortex_m::itm::write_all::h323641e67bf5c27a+0x28> @ imm = #0x12
 80013f0:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 80013f2:      	lsls	r3, r3, #0x1f
 80013f4:      	itt	eq
 80013f6:      	ldreq	r3, [r0]
;             while !port.is_fifo_ready() {}
 80013f8:      	lslseq.w	r3, r3, #0x1f
 80013fc:      	bne	0x8001404 <cortex_m::itm::write_all::h323641e67bf5c27a+0x28> @ imm = #0x4
 80013fe:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 8001400:      	lsls	r3, r3, #0x1f
 8001402:      	beq	0x80013ea <cortex_m::itm::write_all::h323641e67bf5c27a+0xe> @ imm = #-0x1c
;             port.write_u8(*ptr);
 8001404:      	ldrb	r3, [r1], #1
;             len -= 1;
 8001408:      	subs	r2, #0x1
 800140a:      	strb	r3, [r0]
;         if ptr as usize % 4 == 2 {
 800140c:      	and	r3, r1, #0x3
 8001410:      	cmp	r3, #0x2
 8001412:      	bne	0x800143a <cortex_m::itm::write_all::h323641e67bf5c27a+0x5e> @ imm = #0x24
;             if len > 1 {
 8001414:      	cmp	r2, #0x2
 8001416:      	blo	0x80014c4 <cortex_m::itm::write_all::h323641e67bf5c27a+0xe8> @ imm = #0xaa
 8001418:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 800141a:      	lsls	r3, r3, #0x1f
 800141c:      	bne	0x8001432 <cortex_m::itm::write_all::h323641e67bf5c27a+0x56> @ imm = #0x12
 800141e:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8001420:      	lsls	r3, r3, #0x1f
 8001422:      	itt	eq
 8001424:      	ldreq	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8001426:      	lslseq.w	r3, r3, #0x1f
 800142a:      	bne	0x8001432 <cortex_m::itm::write_all::h323641e67bf5c27a+0x56> @ imm = #0x4
 800142c:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 800142e:      	lsls	r3, r3, #0x1f
 8001430:      	beq	0x8001418 <cortex_m::itm::write_all::h323641e67bf5c27a+0x3c> @ imm = #-0x1c
 8001432:      	ldrh	r3, [r1], #2
;                 len -= 2;
 8001436:      	subs	r2, #0x2
 8001438:      	strh	r3, [r0]
;     if len == 0 {
 800143a:      	cmp	r2, #0x0
 800143c:      	beq	0x80014e6 <cortex_m::itm::write_all::h323641e67bf5c27a+0x10a> @ imm = #0xa6
;     let split = len & !0b11;
 800143e:      	bic	r12, r2, #0x3
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8001442:      	lsrs.w	lr, r2, #0x2
 8001446:      	beq	0x8001476 <cortex_m::itm::write_all::h323641e67bf5c27a+0x9a> @ imm = #0x2c
 8001448:      	movs	r3, #0x0
 800144a:      	mov	r4, r1
 800144c:      	b	0x800145a <cortex_m::itm::write_all::h323641e67bf5c27a+0x7e> @ imm = #0xa
 800144e:      	ldr	r5, [r4], #4
 8001452:      	adds	r3, #0x1
 8001454:      	cmp	r3, lr
 8001456:      	str	r5, [r0]
 8001458:      	beq	0x8001476 <cortex_m::itm::write_all::h323641e67bf5c27a+0x9a> @ imm = #0x1a
 800145a:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 800145c:      	lsls	r5, r5, #0x1f
 800145e:      	bne	0x800144e <cortex_m::itm::write_all::h323641e67bf5c27a+0x72> @ imm = #-0x14
 8001460:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8001462:      	lsls	r5, r5, #0x1f
 8001464:      	itt	eq
 8001466:      	ldreq	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8001468:      	lslseq.w	r5, r5, #0x1f
 800146c:      	bne	0x800144e <cortex_m::itm::write_all::h323641e67bf5c27a+0x72> @ imm = #-0x22
 800146e:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8001470:      	lsls	r5, r5, #0x1f
 8001472:      	beq	0x800145a <cortex_m::itm::write_all::h323641e67bf5c27a+0x7e> @ imm = #-0x1c
 8001474:      	b	0x800144e <cortex_m::itm::write_all::h323641e67bf5c27a+0x72> @ imm = #-0x2a
;     let mut left = len & 0b11;
 8001476:      	and	r2, r2, #0x3
 800147a:      	add	r1, r12
;     if left > 1 {
 800147c:      	cmp	r2, #0x2
 800147e:      	blo	0x80014a2 <cortex_m::itm::write_all::h323641e67bf5c27a+0xc6> @ imm = #0x20
 8001480:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001482:      	lsls	r3, r3, #0x1f
 8001484:      	bne	0x800149a <cortex_m::itm::write_all::h323641e67bf5c27a+0xbe> @ imm = #0x12
 8001486:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001488:      	lsls	r3, r3, #0x1f
 800148a:      	itt	eq
 800148c:      	ldreq	r3, [r0]
;         while !port.is_fifo_ready() {}
 800148e:      	lslseq.w	r3, r3, #0x1f
 8001492:      	bne	0x800149a <cortex_m::itm::write_all::h323641e67bf5c27a+0xbe> @ imm = #0x4
 8001494:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001496:      	lsls	r3, r3, #0x1f
 8001498:      	beq	0x8001480 <cortex_m::itm::write_all::h323641e67bf5c27a+0xa4> @ imm = #-0x1c
 800149a:      	ldrh	r3, [r1], #2
;         left -= 2;
 800149e:      	subs	r2, #0x2
 80014a0:      	strh	r3, [r0]
;     if left == 1 {
 80014a2:      	cmp	r2, #0x1
; }
 80014a4:      	it	ne
 80014a6:      	popne	{r4, r5, r7, pc}
 80014a8:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 80014aa:      	lsls	r2, r2, #0x1f
 80014ac:      	bne	0x80014e2 <cortex_m::itm::write_all::h323641e67bf5c27a+0x106> @ imm = #0x32
 80014ae:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 80014b0:      	lsls	r2, r2, #0x1f
 80014b2:      	itt	eq
 80014b4:      	ldreq	r2, [r0]
;         while !port.is_fifo_ready() {}
 80014b6:      	lslseq.w	r2, r2, #0x1f
 80014ba:      	bne	0x80014e2 <cortex_m::itm::write_all::h323641e67bf5c27a+0x106> @ imm = #0x24
 80014bc:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 80014be:      	lsls	r2, r2, #0x1f
 80014c0:      	beq	0x80014a8 <cortex_m::itm::write_all::h323641e67bf5c27a+0xcc> @ imm = #-0x1c
 80014c2:      	b	0x80014e2 <cortex_m::itm::write_all::h323641e67bf5c27a+0x106> @ imm = #0x1c
;                 if len == 1 {
 80014c4:      	cmp	r2, #0x1
 80014c6:      	bne	0x80014e6 <cortex_m::itm::write_all::h323641e67bf5c27a+0x10a> @ imm = #0x1c
 80014c8:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 80014ca:      	lsls	r2, r2, #0x1f
 80014cc:      	bne	0x80014e2 <cortex_m::itm::write_all::h323641e67bf5c27a+0x106> @ imm = #0x12
 80014ce:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 80014d0:      	lsls	r2, r2, #0x1f
 80014d2:      	itt	eq
 80014d4:      	ldreq	r2, [r0]
;                     while !port.is_fifo_ready() {}
 80014d6:      	lslseq.w	r2, r2, #0x1f
 80014da:      	bne	0x80014e2 <cortex_m::itm::write_all::h323641e67bf5c27a+0x106> @ imm = #0x4
 80014dc:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 80014de:      	lsls	r2, r2, #0x1f
 80014e0:      	beq	0x80014c8 <cortex_m::itm::write_all::h323641e67bf5c27a+0xec> @ imm = #-0x1c
 80014e2:      	ldrb	r1, [r1]
 80014e4:      	strb	r1, [r0]
; }
 80014e6:      	pop	{r4, r5, r7, pc}

080014e8 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80014e8:      	push	{r7, lr}
 80014ea:      	mov	r7, sp
;                 unsafe { main() }
 80014ec:      	bl	0x8000222 <main>        @ imm = #-0x12ce
 80014f0:      	trap

080014f2 <WWDG>:
;     loop {
 80014f2:      	b	0x80014f2 <WWDG>        @ imm = #-0x4

080014f4 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 80014f4:      	bx	lr

080014f6 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 80014f6:      	push	{r7, lr}
 80014f8:      	mov	r7, sp
 80014fa:      	sub	sp, #0x30
 80014fc:      	str	r0, [sp, #0x4]
;                     $func($($args),*)
 80014fe:      	bl	0x8001702 <__cpsid>     @ imm = #0x200
;     iprintln!(stim, "{}", info);
 8001502:      	movw	r0, #0x1547
 8001506:      	movw	r1, #0x1a90
;     iprintln!(stim, "{}", info);
 800150a:      	movt	r0, #0x800
 800150e:      	add	r2, sp, #0x18
 8001510:      	str	r0, [sp, #0xc]
 8001512:      	add	r0, sp, #0x4
 8001514:      	str	r0, [sp, #0x8]
 8001516:      	mov.w	r0, #0xe0000000
;     Port(port).write_fmt(args).ok();
 800151a:      	str	r0, [sp, #0x10]
 800151c:      	add	r0, sp, #0x10
 800151e:      	str	r0, [sp, #0x14]
 8001520:      	movs	r0, #0x1
 8001522:      	str	r0, [sp, #0x2c]
 8001524:      	add	r0, sp, #0x8
 8001526:      	str	r0, [sp, #0x28]
 8001528:      	movs	r0, #0x2
 800152a:      	str	r0, [sp, #0x24]
 800152c:      	movw	r0, #0x1aac
 8001530:      	movt	r0, #0x800
 8001534:      	movt	r1, #0x800
 8001538:      	str	r0, [sp, #0x20]
 800153a:      	movs	r0, #0x0
 800153c:      	str	r0, [sp, #0x18]
 800153e:      	add	r0, sp, #0x14
 8001540:      	bl	0x8001202 <core::fmt::write::h41d1056afb849d0f> @ imm = #-0x342
;     loop {
 8001544:      	b	0x8001544 <rust_begin_unwind+0x4e> @ imm = #-0x4

08001546 <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919>:
 8001546:      	push	{r4, r5, r6, r7, lr}
 8001548:      	add	r7, sp, #0xc
 800154a:      	str	r8, [sp, #-4]!
 800154e:      	sub	sp, #0x38
 8001550:      	ldrd	r4, r5, [r1]
 8001554:      	movw	r1, #0x1998
 8001558:      	ldr	r3, [r5, #0xc]
 800155a:      	movt	r1, #0x800
 800155e:      	ldr.w	r8, [r0]
 8001562:      	movs	r2, #0xc
 8001564:      	mov	r0, r4
 8001566:      	blx	r3
 8001568:      	cbz	r0, 0x8001576 <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919+0x30> @ imm = #0xa
 800156a:      	movs	r6, #0x1
 800156c:      	mov	r0, r6
 800156e:      	add	sp, #0x38
 8001570:      	ldr	r8, [sp], #4
 8001574:      	pop	{r4, r5, r6, r7, pc}
 8001576:      	ldr.w	r0, [r8, #0x8]
 800157a:      	cbz	r0, 0x8001588 <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919+0x42> @ imm = #0xa
 800157c:      	str	r0, [sp, #0x4]
 800157e:      	movw	r0, #0x13a3
 8001582:      	movt	r0, #0x800
 8001586:      	b	0x80015b4 <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919+0x6e> @ imm = #0x2a
 8001588:      	ldrd	r6, r0, [r8]
 800158c:      	ldr	r1, [r0, #0xc]
 800158e:      	mov	r0, r6
 8001590:      	blx	r1
 8001592:      	movw	r2, #0x6c34
 8001596:      	movt	r2, #0x89a7
 800159a:      	eors	r1, r2
 800159c:      	movw	r2, #0x1ac8
 80015a0:      	movt	r2, #0xa9f8
 80015a4:      	eors	r0, r2
 80015a6:      	orrs	r0, r1
 80015a8:      	bne	0x80015e2 <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919+0x9c> @ imm = #0x36
 80015aa:      	movw	r0, #0x13cf
 80015ae:      	str	r6, [sp, #0x4]
 80015b0:      	movt	r0, #0x800
 80015b4:      	str	r0, [sp, #0xc]
 80015b6:      	add	r0, sp, #0x4
 80015b8:      	str	r0, [sp, #0x8]
 80015ba:      	add	r0, sp, #0x8
 80015bc:      	str	r0, [sp, #0x30]
 80015be:      	movs	r0, #0x2
 80015c0:      	str	r0, [sp, #0x2c]
 80015c2:      	movw	r0, #0x19a8
 80015c6:      	movt	r0, #0x800
 80015ca:      	add	r2, sp, #0x20
 80015cc:      	str	r0, [sp, #0x28]
 80015ce:      	movs	r0, #0x0
 80015d0:      	movs	r6, #0x1
 80015d2:      	str	r0, [sp, #0x20]
 80015d4:      	mov	r0, r4
 80015d6:      	mov	r1, r5
 80015d8:      	str	r6, [sp, #0x34]
 80015da:      	bl	0x8001202 <core::fmt::write::h41d1056afb849d0f> @ imm = #-0x3dc
 80015de:      	cmp	r0, #0x0
 80015e0:      	bne	0x800156c <<&T as core::fmt::Display>::fmt::h2e3875b8cb518919+0x26> @ imm = #-0x78
 80015e2:      	ldr.w	r0, [r8, #0xc]
 80015e6:      	movw	r1, #0x41b
 80015ea:      	movt	r1, #0x800
 80015ee:      	add.w	r2, r0, #0xc
 80015f2:      	str	r1, [sp, #0x1c]
 80015f4:      	strd	r1, r2, [sp, #20]
 80015f8:      	add.w	r1, r0, #0x8
 80015fc:      	str	r1, [sp, #0x10]
 80015fe:      	movw	r1, #0x11f7
 8001602:      	movt	r1, #0x800
 8001606:      	add	r2, sp, #0x20
 8001608:      	strd	r0, r1, [sp, #8]
 800160c:      	add	r1, sp, #0x8
 800160e:      	movs	r0, #0x3
 8001610:      	strd	r0, r1, [sp, #44]
 8001614:      	mov	r1, r5
 8001616:      	str	r0, [sp, #0x34]
 8001618:      	movw	r0, #0x1980
 800161c:      	movt	r0, #0x800
 8001620:      	str	r0, [sp, #0x28]
 8001622:      	movs	r0, #0x0
 8001624:      	str	r0, [sp, #0x20]
 8001626:      	mov	r0, r4
 8001628:      	bl	0x8001202 <core::fmt::write::h41d1056afb849d0f> @ imm = #-0x42a
 800162c:      	mov	r6, r0
 800162e:      	mov	r0, r6
 8001630:      	add	sp, #0x38
 8001632:      	ldr	r8, [sp], #4
 8001636:      	pop	{r4, r5, r6, r7, pc}

08001638 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::hedd57c8173b8f59d>:
 8001638:      	bx	lr

0800163a <<&mut W as core::fmt::Write>::write_str::h23f6aa6bd5d44767>:
 800163a:      	push	{r7, lr}
 800163c:      	mov	r7, sp
 800163e:      	ldr	r0, [r0]
 8001640:      	ldr	r0, [r0]
;         write_all(self.0, s.as_bytes());
 8001642:      	bl	0x80013dc <cortex_m::itm::write_all::h323641e67bf5c27a> @ imm = #-0x26a
 8001646:      	movs	r0, #0x0
 8001648:      	pop	{r7, pc}

0800164a <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a>:
 800164a:      	push	{r7, lr}
 800164c:      	mov	r7, sp
 800164e:      	sub	sp, #0x8
 8001650:      	ldr	r0, [r0]
 8001652:      	movs	r2, #0x0
 8001654:      	cmp	r1, #0x80
 8001656:      	ldr	r0, [r0]
 8001658:      	str	r2, [sp, #0x4]
 800165a:      	bhs	0x8001664 <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x1a> @ imm = #0x6
 800165c:      	strb.w	r1, [sp, #0x4]
 8001660:      	movs	r2, #0x1
 8001662:      	b	0x80016c6 <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x7c> @ imm = #0x60
 8001664:      	movs	r2, #0x2
 8001666:      	mov	r3, r1
 8001668:      	bfi	r3, r2, #6, #26
 800166c:      	cmp.w	r1, #0x800
 8001670:      	bhs	0x800167e <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x34> @ imm = #0xa
 8001672:      	strb.w	r3, [sp, #0x5]
 8001676:      	movs	r3, #0xc0
 8001678:      	orr.w	r1, r3, r1, lsr #6
 800167c:      	b	0x80016c2 <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x78> @ imm = #0x42
 800167e:      	cmp.w	r1, #0x10000
 8001682:      	bhs	0x80016a0 <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x56> @ imm = #0x1a
 8001684:      	strb.w	r3, [sp, #0x6]
 8001688:      	lsrs	r3, r1, #0x6
 800168a:      	bfi	r3, r2, #6, #26
 800168e:      	movs	r2, #0xe0
 8001690:      	orr.w	r1, r2, r1, lsr #12
 8001694:      	strb.w	r3, [sp, #0x5]
 8001698:      	strb.w	r1, [sp, #0x4]
 800169c:      	movs	r2, #0x3
 800169e:      	b	0x80016c6 <<&mut W as core::fmt::Write>::write_char::hd20c0fd28191df3a+0x7c> @ imm = #0x24
 80016a0:      	strb.w	r3, [sp, #0x7]
 80016a4:      	lsrs	r3, r1, #0x6
 80016a6:      	bfi	r3, r2, #6, #26
 80016aa:      	strb.w	r3, [sp, #0x6]
 80016ae:      	lsrs	r3, r1, #0xc
 80016b0:      	lsrs	r1, r1, #0x12
 80016b2:      	bfi	r3, r2, #6, #26
 80016b6:      	movs	r2, #0x1e
 80016b8:      	bfi	r1, r2, #3, #29
 80016bc:      	movs	r2, #0x4
 80016be:      	strb.w	r3, [sp, #0x5]
 80016c2:      	strb.w	r1, [sp, #0x4]
 80016c6:      	add	r1, sp, #0x4
;         write_all(self.0, s.as_bytes());
 80016c8:      	bl	0x80013dc <cortex_m::itm::write_all::h323641e67bf5c27a> @ imm = #-0x2f0
 80016cc:      	movs	r0, #0x0
 80016ce:      	add	sp, #0x8
 80016d0:      	pop	{r7, pc}

080016d2 <<&mut W as core::fmt::Write>::write_fmt::h699425a1f97c72e8>:
 80016d2:      	push	{r4, r5, r6, r7, lr}
 80016d4:      	add	r7, sp, #0xc
 80016d6:      	str	r11, [sp, #-4]!
 80016da:      	sub	sp, #0x20
 80016dc:      	ldr	r0, [r0]
 80016de:      	add	r2, sp, #0x8
 80016e0:      	str	r0, [sp, #0x4]
 80016e2:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 80016e6:      	mov	r0, r2
 80016e8:      	movw	r1, #0x1a90
 80016ec:      	movt	r1, #0x800
 80016f0:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80016f4:      	add	r0, sp, #0x4
 80016f6:      	bl	0x8001202 <core::fmt::write::h41d1056afb849d0f> @ imm = #-0x4f8
 80016fa:      	add	sp, #0x20
 80016fc:      	ldr	r11, [sp], #4
 8001700:      	pop	{r4, r5, r6, r7, pc}

08001702 <__cpsid>:
 8001702:      	cpsid i
 8001704:      	bx	lr

08001706 <__cpsie>:
 8001706:      	cpsie i
 8001708:      	bx	lr

0800170a <__primask_r>:
 800170a:      	mrs	r0, primask
 800170e:      	bx	lr

08001710 <__aeabi_memcpy4>:
 8001710:      	b.w	0x8001718 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298> @ imm = #0x4

08001714 <compiler_builtins::arm::__aeabi_memcpy::h5a2339c5254f452a>:
 8001714:      	b.w	0x80017b2 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd> @ imm = #0x9a

08001718 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298>:
 8001718:      	push	{r4, r5, r7, lr}
 800171a:      	add	r7, sp, #0x8
 800171c:      	cmp	r2, #0x4
 800171e:      	blo	0x80017a2 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x8a> @ imm = #0x80
 8001720:      	sub.w	lr, r2, #0x4
 8001724:      	movs	r3, #0x1
 8001726:      	add.w	r3, r3, lr, lsr #2
 800172a:      	ands	r4, r3, #0x3
 800172e:      	beq	0x800174e <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x36> @ imm = #0x1c
 8001730:      	mov	r12, r1
 8001732:      	mov	r3, r0
 8001734:      	ldr	r5, [r12], #4
 8001738:      	cmp	r4, #0x1
 800173a:      	str	r5, [r3], #4
 800173e:      	bne	0x8001760 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x48> @ imm = #0x1e
 8001740:      	mov	r0, r3
 8001742:      	mov	r1, r12
 8001744:      	mov	r2, lr
 8001746:      	cmp.w	lr, #0xc
 800174a:      	bhs	0x8001784 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x6c> @ imm = #0x36
 800174c:      	b	0x8001754 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x3c> @ imm = #0x4
 800174e:      	cmp.w	lr, #0xc
 8001752:      	bhs	0x8001784 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x6c> @ imm = #0x2e
 8001754:      	mov	r0, r3
 8001756:      	mov	r1, r12
 8001758:      	pop.w	{r4, r5, r7, lr}
 800175c:      	b.w	0x8001714 <compiler_builtins::arm::__aeabi_memcpy::h5a2339c5254f452a> @ imm = #-0x4c
 8001760:      	ldr	r3, [r1, #0x4]
 8001762:      	cmp	r4, #0x2
 8001764:      	str	r3, [r0, #0x4]
 8001766:      	bne	0x8001770 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x58> @ imm = #0x6
 8001768:      	subs	r2, #0x8
 800176a:      	adds	r1, #0x8
 800176c:      	adds	r0, #0x8
 800176e:      	b	0x800177a <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x62> @ imm = #0x8
 8001770:      	ldr	r3, [r1, #0x8]
 8001772:      	subs	r2, #0xc
 8001774:      	str	r3, [r0, #0x8]
 8001776:      	adds	r1, #0xc
 8001778:      	adds	r0, #0xc
 800177a:      	mov	r3, r0
 800177c:      	mov	r12, r1
 800177e:      	cmp.w	lr, #0xc
 8001782:      	blo	0x8001754 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x3c> @ imm = #-0x32
 8001784:      	ldr	r3, [r1]
 8001786:      	subs	r2, #0x10
 8001788:      	str	r3, [r0]
 800178a:      	cmp	r2, #0x3
 800178c:      	ldr	r3, [r1, #0x4]
 800178e:      	str	r3, [r0, #0x4]
 8001790:      	ldr	r3, [r1, #0x8]
 8001792:      	str	r3, [r0, #0x8]
 8001794:      	ldr	r3, [r1, #0xc]
 8001796:      	add.w	r1, r1, #0x10
 800179a:      	str	r3, [r0, #0xc]
 800179c:      	add.w	r0, r0, #0x10
 80017a0:      	bhi	0x8001784 <compiler_builtins::arm::__aeabi_memcpy4::h3dce27352fd2e298+0x6c> @ imm = #-0x20
 80017a2:      	mov	r12, r1
 80017a4:      	mov	r3, r0
 80017a6:      	mov	r0, r3
 80017a8:      	mov	r1, r12
 80017aa:      	pop.w	{r4, r5, r7, lr}
 80017ae:      	b.w	0x8001714 <compiler_builtins::arm::__aeabi_memcpy::h5a2339c5254f452a> @ imm = #-0x9e

080017b2 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd>:
 80017b2:      	push	{r4, r5, r6, r7, lr}
 80017b4:      	add	r7, sp, #0xc
 80017b6:      	push.w	{r8, r9, r10}
 80017ba:      	cmp	r2, #0xf
 80017bc:      	bls	0x8001882 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0xd0> @ imm = #0xc2
 80017be:      	rsbs	r3, r0, #0
 80017c0:      	ands	r4, r3, #0x3
 80017c4:      	add.w	r12, r0, r4
 80017c8:      	beq	0x80017f8 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x46> @ imm = #0x2c
 80017ca:      	mov	r3, r0
 80017cc:      	mov	r6, r1
 80017ce:      	ldrb	r5, [r6]
 80017d0:      	strb	r5, [r3], #1
 80017d4:      	cmp	r3, r12
 80017d6:      	bhs	0x80017f8 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x46> @ imm = #0x1e
 80017d8:      	ldrb	r5, [r6, #0x1]
 80017da:      	strb	r5, [r3], #1
 80017de:      	cmp	r3, r12
 80017e0:      	ittt	lo
 80017e2:      	ldrblo	r5, [r6, #0x2]
 80017e4:      	strblo	r5, [r3], #1
 80017e8:      	cmplo	r3, r12
 80017ea:      	bhs	0x80017f8 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x46> @ imm = #0xa
 80017ec:      	ldrb	r5, [r6, #0x3]
 80017ee:      	adds	r6, #0x4
 80017f0:      	strb	r5, [r3], #1
 80017f4:      	cmp	r3, r12
 80017f6:      	blo	0x80017ce <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x1c> @ imm = #-0x2c
 80017f8:      	sub.w	lr, r2, r4
 80017fc:      	add.w	r8, r1, r4
 8001800:      	bic	r9, lr, #0x3
 8001804:      	ands	r1, r8, #0x3
 8001808:      	add.w	r3, r12, r9
 800180c:      	beq	0x8001888 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0xd6> @ imm = #0x78
 800180e:      	cmp.w	r9, #0x1
 8001812:      	blt	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0xa4
 8001814:      	lsl.w	r10, r1, #0x3
 8001818:      	bic	r1, r8, #0x3
 800181c:      	add.w	r5, r1, #0x8
 8001820:      	rsb.w	r2, r10, #0x0
 8001824:      	ldr	r1, [r1]
 8001826:      	and	r6, r2, #0x18
 800182a:      	ldr	r2, [r5, #-4]
 800182e:      	lsr.w	r1, r1, r10
 8001832:      	lsl.w	r4, r2, r6
 8001836:      	orrs	r1, r4
 8001838:      	str	r1, [r12], #4
 800183c:      	cmp	r12, r3
 800183e:      	bhs	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0x78
 8001840:      	ldr	r1, [r5]
 8001842:      	lsr.w	r2, r2, r10
 8001846:      	lsl.w	r4, r1, r6
 800184a:      	orrs	r2, r4
 800184c:      	str	r2, [r12], #4
 8001850:      	cmp	r12, r3
 8001852:      	itttt	lo
 8001854:      	ldrlo	r2, [r5, #0x4]
 8001856:      	lsrlo.w	r1, r1, r10
 800185a:      	lsllo.w	r4, r2, r6
 800185e:      	orrlo	r1, r4
 8001860:      	itt	lo
 8001862:      	strlo	r1, [r12], #4
 8001866:      	cmplo	r12, r3
 8001868:      	bhs	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0x4e
 800186a:      	ldr	r1, [r5, #0x8]
 800186c:      	lsr.w	r2, r2, r10
 8001870:      	adds	r5, #0x10
 8001872:      	lsl.w	r4, r1, r6
 8001876:      	orrs	r2, r4
 8001878:      	str	r2, [r12], #4
 800187c:      	cmp	r12, r3
 800187e:      	blo	0x800182a <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x78> @ imm = #-0x58
 8001880:      	b	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0x36
 8001882:      	mov	r3, r0
 8001884:      	cbnz	r2, 0x80018c4 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x112> @ imm = #0x3c
 8001886:      	b	0x80018f0 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x13e> @ imm = #0x66
 8001888:      	cmp.w	r9, #0x1
 800188c:      	blt	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0x2a
 800188e:      	mov	r4, r8
 8001890:      	ldr	r1, [r4]
 8001892:      	str	r1, [r12], #4
 8001896:      	cmp	r12, r3
 8001898:      	bhs	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0x1e
 800189a:      	ldr	r1, [r4, #0x4]
 800189c:      	str	r1, [r12], #4
 80018a0:      	cmp	r12, r3
 80018a2:      	ittt	lo
 80018a4:      	ldrlo	r1, [r4, #0x8]
 80018a6:      	strlo	r1, [r12], #4
 80018aa:      	cmplo	r12, r3
 80018ac:      	bhs	0x80018ba <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x108> @ imm = #0xa
 80018ae:      	ldr	r1, [r4, #0xc]
 80018b0:      	adds	r4, #0x10
 80018b2:      	str	r1, [r12], #4
 80018b6:      	cmp	r12, r3
 80018b8:      	blo	0x8001890 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0xde> @ imm = #-0x2c
 80018ba:      	add.w	r1, r8, r9
 80018be:      	and	r2, lr, #0x3
 80018c2:      	cbz	r2, 0x80018f0 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x13e> @ imm = #0x2a
 80018c4:      	add	r2, r3
 80018c6:      	ldrb	r6, [r1]
 80018c8:      	strb	r6, [r3], #1
 80018cc:      	cmp	r3, r2
 80018ce:      	bhs	0x80018f0 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x13e> @ imm = #0x1e
 80018d0:      	ldrb	r6, [r1, #0x1]
 80018d2:      	strb	r6, [r3], #1
 80018d6:      	cmp	r3, r2
 80018d8:      	ittt	lo
 80018da:      	ldrblo	r6, [r1, #0x2]
 80018dc:      	strblo	r6, [r3], #1
 80018e0:      	cmplo	r3, r2
 80018e2:      	bhs	0x80018f0 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x13e> @ imm = #0xa
 80018e4:      	ldrb	r6, [r1, #0x3]
 80018e6:      	adds	r1, #0x4
 80018e8:      	strb	r6, [r3], #1
 80018ec:      	cmp	r3, r2
 80018ee:      	blo	0x80018c6 <compiler_builtins::mem::memcpy::h3d9fcf67c5b680bd+0x114> @ imm = #-0x2c
 80018f0:      	pop.w	{r8, r9, r10}
 80018f4:      	pop	{r4, r5, r6, r7, pc}

080018f6 <HardFaultTrampoline>:
 80018f6:      	mov	r0, lr
 80018f8:      	movs	r1, #0x4
 80018fa:      	tst	r0, r1
 80018fc:      	bne	0x8001904 <HardFaultTrampoline+0xe> @ imm = #0x4
 80018fe:      	mrs	r0, msp
 8001902:      	b	0x800190a <HardFault_>  @ imm = #0x4
 8001904:      	mrs	r0, psp
 8001908:      	b	0x800190a <HardFault_>  @ imm = #-0x2

0800190a <HardFault_>:
;     loop {
 800190a:      	b	0x800190a <HardFault_>  @ imm = #-0x4
